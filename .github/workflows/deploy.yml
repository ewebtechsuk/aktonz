name: Deploy to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual deployment"
        required: false
        default: ""
      audit:
        description: "Set to true to run remote audit only (no rsync)"
        required: false
        default: "false"
      debug_logs:
        description: "If true: after deploy curl homepage + tail logs"
        required: false
        default: "false"
      fail_on_fatal:
        description: "If true: fail when homepage shows WP critical error or HTTP >=500"
        required: false
        default: "false"
      dry_run:
        description: "If true: rsync uses --dry-run (no remote file changes)"
        required: false
        default: "false"
      toggle_debug:
        description: "Enable or disable temporary WP_DEBUG (enable|disable|none)"
        required: false
        default: "none"
      debug_minutes:
        description: "Window (minutes) WP_DEBUG stays active after enabling"
        required: false
        default: "15"
      disable_plugins:
        description: "Comma-separated plugin folder slugs to disable (by renaming) before deploy"
        required: false
        default: ""

jobs:
  deploy:
    name: Sync files to Hostinger
    runs-on: ubuntu-latest
    env:
      # Raw sources (may be empty). We'll resolve to PRODUCTION_URL in a step to avoid complex inline expression issues.
      PROD_URL_SECRET: ${{ secrets.PRODUCTION_URL }}
      PROD_URL_VAR: ${{ vars.PRODUCTION_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets (fail-fast)
        run: |
          REQUIRED=(HOSTINGER_SSH_HOST HOSTINGER_SSH_USER HOSTINGER_SSH_PORT HOSTINGER_PATH HOSTINGER_SSH_KEY)
          MISSING=()
          for s in "${REQUIRED[@]}"; do
            if [ -z "${!s:-}" ]; then MISSING+=("$s"); fi
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "[secrets][fatal] Missing required secrets: ${MISSING[*]}" >&2
            exit 1
          fi
          echo "[secrets] All required base secrets present."
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          HOSTINGER_SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Early remote connectivity marker
        run: |
          SHORT=${GITHUB_SHA::7}
          echo "[early] Creating early marker via SSH..."
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "echo $GITHUB_SHA > $HOSTINGER_PATH/ci_early_$SHORT.txt 2>/dev/null || true" || echo "[early][warn] SSH early marker failed"
          echo "[early] Attempted to write ci_early_$SHORT.txt"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Remote DB preflight (fail-fast)
        run: |
          set -e
          echo "[db-preflight] Locating remote wp-config.php"
          FIND_CFG="if [ -f '$HOSTINGER_PATH/wp-config.php' ]; then echo '$HOSTINGER_PATH/wp-config.php'; elif [ -f '$(dirname "$HOSTINGER_PATH")/wp-config.php' ]; then echo '$(dirname "$HOSTINGER_PATH")/wp-config.php'; fi"
          CFG_PATH=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "$FIND_CFG") || CFG_PATH=""
          if [ -z "$CFG_PATH" ]; then echo "[db-preflight][warn] wp-config.php not found; continuing (cannot validate DB)"; exit 0; fi
          echo "[db-preflight] Using wp-config: $CFG_PATH"
          # Extract constants
          extract(){ ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -E \"define\\( *'${1}'\\" '$CFG_PATH' | sed -E \"s/.*'${1}' *, *'([^']+)'.*/\\1/\" | head -n1" 2>/dev/null || true; }
          DB_NAME=$(extract DB_NAME)
          DB_USER=$(extract DB_USER)
            DB_HOST=$(extract DB_HOST)
          PW_LEN=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -E \"define\\( *'DB_PASSWORD'\\" '$CFG_PATH' | sed -E \"s/.*'DB_PASSWORD' *, *'([^']*)'.*/\\1/\" | awk '{print length($0)}'" 2>/dev/null || echo 0)
          echo "[db-preflight] DB_NAME=$DB_NAME DB_USER=$DB_USER DB_HOST=$DB_HOST DB_PASSWORD_LEN=$PW_LEN"
          if [ -z "$DB_HOST" ] || [ -z "$DB_NAME" ] || [ -z "$DB_USER" ]; then
            echo "[db-preflight][warn] Missing DB constants; continuing"
            exit 0
          fi
          # Create and run a remote PHP probe (avoids exposing password in logs)
          PROBE="<?php @include '$CFG_PATH'; $t=@mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME); if(!$t){echo 'CONNECT_FAIL:' . (mysqli_connect_errno()).' '.mysqli_connect_error();} else {echo 'CONNECT_OK'; mysqli_close($t);} ?>"
          RESULT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "php -d display_errors=0 -r \"$PROBE\"" 2>/dev/null || true)
          echo "[db-preflight] Result=$RESULT"
          if echo "$RESULT" | grep -q 'CONNECT_FAIL'; then
            echo "[db-preflight][fatal] Database connection failing; aborting deploy to avoid serving broken state." >&2
            exit 1
          fi
          echo "[db-preflight] OK (database reachable)"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Resolve production URL (secret > var) & show
        run: |
          if [ -n "${PROD_URL_SECRET:-}" ]; then USE="$PROD_URL_SECRET"; elif [ -n "${PROD_URL_VAR:-}" ]; then USE="$PROD_URL_VAR"; else USE=""; fi
          if [ -z "$USE" ]; then
            echo "[prod-url][warn] Neither secret nor variable set (PRODUCTION_URL). Health checkpoints will skip.";
          else
            echo "[prod-url] Using production URL: $USE";
            echo "PRODUCTION_URL=$USE" >> $GITHUB_ENV
          fi

      - name: Ensure jq installed
        run: |
          if command -v jq >/dev/null 2>&1; then
            echo "[setup] jq already present ($(jq --version))";
            echo "JQ_VERSION=$(jq --version)" >> $GITHUB_ENV
          else
            echo "[setup] Installing jq";
            sudo apt-get update -y >/dev/null 2>&1 || sudo apt-get update -y;
            sudo apt-get install -y jq >/dev/null 2>&1 || sudo apt-get install -y jq;
            command -v jq >/dev/null 2>&1 && echo "[setup] jq install complete ($(jq --version))" || { echo "[setup][fatal] jq install failed"; exit 1; }
            echo "JQ_VERSION=$(jq --version)" >> $GITHUB_ENV
          fi

      - name: Show manual trigger reason
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.reason != '' }}
        run: |
          echo "Manual deployment reason: ${{ github.event.inputs.reason }}"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Add Hostinger host key (known_hosts)
        run: |
          set -e
          : "Adding host key for $HOSTINGER_SSH_HOST:$HOSTINGER_SSH_PORT"
          mkdir -p ~/.ssh
          # Remove any existing lines for host:port to avoid duplicates (ssh-keyscan does not include port, so just host)
          if [ -f ~/.ssh/known_hosts ]; then
            grep -v "^$HOSTINGER_SSH_HOST[[:space:]]" ~/.ssh/known_hosts > ~/.ssh/known_hosts.tmp || true
            mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts
          fi
          echo "[ssh] Scanning host key..."
          KEYS=$(ssh-keyscan -p "$HOSTINGER_SSH_PORT" -T 10 "$HOSTINGER_SSH_HOST" 2>/dev/null | grep -v '^#' || true)
          if [ -z "$KEYS" ]; then echo "[ssh][error] ssh-keyscan returned no keys for $HOSTINGER_SSH_HOST:$HOSTINGER_SSH_PORT"; exit 1; fi
            printf '%s\n' "$KEYS" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "[ssh] Added $(printf '%s' "$KEYS" | grep -c '^' || echo 0) key line(s) to known_hosts"
          # Show fingerprint (first key)
          printf '%s\n' "$KEYS" | head -n1 | awk '{print "[ssh] First key type=" $2}' || true
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}


      - name: Pre-audit remote environment
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
        run: |
          echo "[audit-pre] Starting pre-audit (event=${GITHUB_EVENT_NAME} audit_input=${AUDIT_INPUT:-n/a})"
          if [ -z "$HOSTINGER_PATH" ]; then echo "[audit-pre] HOSTINGER_PATH secret missing"; exit 1; fi
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          if [ "$CLEAN_PATH" != "$HOSTINGER_PATH" ]; then echo "[audit-pre] Trimmed HOSTINGER_PATH -> '$CLEAN_PATH' (raw had trailing whitespace)"; fi
          HOSTINGER_PATH="$CLEAN_PATH"
          REQUIRED_DIRS=(wp-admin wp-includes wp-content)
          OPTIONAL_DIRS=(core storage)
          EXPECT_FILES=(index.php wp-load.php)
          ssh -o BatchMode=yes -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" 'echo [remote] reachable' || { echo "[audit-pre] SSH failed"; exit 1; }
          echo "[audit-pre] Top-level contents:"; ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A $HOSTINGER_PATH" | sed 's/^/[ls]/'
          MISS=0
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-config.php' ]" 2>/dev/null; then
            echo "[audit-pre] OK config: wp-config.php (root)"
          elif PARENT_DIR=$(dirname "$HOSTINGER_PATH"); ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_DIR/wp-config.php' ]" 2>/dev/null; then
            echo "[audit-pre] OK config: wp-config.php (parent directory)"
          else
            echo "[audit-pre] MISSING config: wp-config.php (neither root nor parent)"; MISS=$((MISS+1));
            BASE_DIR=$(dirname "$HOSTINGER_PATH")
            echo "[audit-pre][hint] Searching nearby directories (maxdepth 4) for wp-config.php to suggest correct path..."
            CANDIDATES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "find '$BASE_DIR' -maxdepth 4 -type f -name wp-config.php 2>/dev/null | sort" || true)
            if [ -n "$CANDIDATES" ]; then
              echo "$CANDIDATES" | sed 's/^/[audit-pre][hint][found] /'
              ONE_COUNT=$(echo "$CANDIDATES" | wc -l | tr -d ' ')
              [ "$ONE_COUNT" = "1" ] && SUGGESTED=$(dirname "$CANDIDATES") && echo "[audit-pre][hint] Consider updating HOSTINGER_PATH secret to: $SUGGESTED"
            else
              echo "[audit-pre][hint] No wp-config.php found within 4 levels of $BASE_DIR"
            fi
          fi
          REMOTE_LIST=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$HOSTINGER_PATH'" ) || REMOTE_LIST=""
          printf '%s' "$REMOTE_LIST" > remote_listing.txt
          echo "[audit-pre][debug] Remote path bytes:"; printf '%s' "$HOSTINGER_PATH" | od -An -tx1 | sed 's/^/[hex]/'
          for d in "${REQUIRED_DIRS[@]}"; do
            if grep -Fxq "$d" <<<"$REMOTE_LIST"; then
              echo "[audit-pre] OK dir(listing): $d"
            else
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$HOSTINGER_PATH/$d' ]" 2>/dev/null; then
                echo "[audit-pre] OK dir(test): $d"
              else
                echo "[audit-pre] MISSING dir: $d"; MISS=$((MISS+1))
                ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -ld '$HOSTINGER_PATH' || true" | sed 's/^/[audit-pre][parent]/'
              fi
            fi
          done
          for d in "${OPTIONAL_DIRS[@]}"; do
            if grep -Fxq "$d" <<<"$REMOTE_LIST"; then
              echo "[audit-pre] OK optional dir(listing): $d"
            else
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$HOSTINGER_PATH/$d' ]" 2>/dev/null; then
                echo "[audit-pre] OK optional dir(test): $d"
              else
                echo "[audit-pre] OPTIONAL dir missing (ignored): $d"
              fi
            fi
          done
          for f in "${EXPECT_FILES[@]}"; do
            if grep -Fxq "$f" <<<"$REMOTE_LIST"; then
              echo "[audit-pre] OK file(listing): $f"
            else
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/$f' ]" 2>/dev/null; then
                echo "[audit-pre] OK file(test): $f"
              else
                echo "[audit-pre] MISSING file: $f"; MISS=$((MISS+1))
              fi
            fi
          done
          for cand in php-error.log debug.log error_log; do
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$cand' ]"; then
              MAX_H=${LOG_MAX_AGE_HOURS:-6}
              LAST_LINE=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$cand'" | grep -E "\\[[0-9]{2}-[A-Za-z]{3}-[0-9]{4} " | tail -n1 || true)
              if [ -n "$LAST_LINE" ]; then
                # Extract timestamp inside leading [..]; previous pattern over-escaped and failed with sed unmatched ')'
                TS_RAW=$(printf '%s' "$LAST_LINE" | sed -E 's/.*\[([0-9]{2}-[A-Za-z]{3}-[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}).*/\1/')
                if EPOCH=$(date -u -d "$TS_RAW UTC" +%s 2>/dev/null); then
                  NOW=$(date -u +%s)
                  AGE=$(( (NOW - EPOCH) / 3600 ))
                  if [ $AGE -le $MAX_H ]; then
                    echo "[audit-pre] Tail of wp-content/$cand (last entry ${AGE}h old <= ${MAX_H}h):"; ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 40 '$HOSTINGER_PATH/wp-content/$cand'" | sed 's/^/[log]/'; break
                  else
                    echo "[audit-pre] Skipping $cand (last entry ${AGE}h old > ${MAX_H}h)";
                  fi
                else
                  echo "[audit-pre] Unparseable timestamp in $cand; showing tail"; ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 40 '$HOSTINGER_PATH/wp-content/$cand'" | sed 's/^/[log]/'; break
                fi
              else
                echo "[audit-pre] No timestamped lines in $cand; showing tail"; ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 40 '$HOSTINGER_PATH/wp-content/$cand'" | sed 's/^/[log]/'; break
              fi
            fi
          done
          echo "[audit-pre] Missing count: $MISS"
          echo "missing_count=$MISS" >> $GITHUB_OUTPUT
          if [ "$MISS" -gt 0 ]; then
            echo "[audit-pre] WARNING: $MISS required path(s) missing."
          else
            echo "[audit-pre] All required paths present."
          fi

      - name: List remote plugins (debug)
        if: ${{ github.event.inputs.audit != 'true' }}
        run: |
          echo "[plugins-list] Listing remote plugin directories to verify slugs";
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A \"$HOSTINGER_PATH/wp-content/plugins\" 2>/dev/null" | sed 's/^/[plugins-list]/' || echo "[plugins-list] Unable to list remote plugins"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Health checkpoint (baseline_pre_plugin)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          URL="${PRODUCTION_URL%/}/"
          PHASE="baseline_pre_plugin"
          STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          curl -s -S -D hc_${PHASE}_headers.txt -o hc_${PHASE}_body.html -w '%{http_code}' "$URL" > hc_${PHASE}_code.txt || true
          CODE=$(cat hc_${PHASE}_code.txt 2>/dev/null || echo 0)
          echo "[health][$PHASE] code=$CODE url=$URL"
          # Remote wp-config metrics (best-effort)
          CFG_PATH=""
          ROOT_CFG="$HOSTINGER_PATH/wp-config.php"
          PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          CFG_LINES=0; CFG_MD5=""
          if [ -n "$CFG_PATH" ]; then
            CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG_PATH' 2>/dev/null" || echo 0)
            CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG_PATH' 2>/dev/null | awk '{print $1}'" || echo unknown)
          fi
          echo "{\"phase\":\"$PHASE\",\"code\":$CODE,\"ts\":\"$STAMP\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$CODE" -ne 200 ]; then
            echo "[health][$PHASE] non-200 detected; capturing remote log tails";
            for lf in debug.log php-error.log error_log; do
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$lf' ]"; then
                ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$lf'" > "hc_${PHASE}_$lf" 2>/dev/null || true
              fi
            done
          fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Config diff & snapshot tracker (baseline_pre_plugin)
        if: ${{ always() && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          LAST=$(tail -n1 health_timeline_raw.jsonl 2>/dev/null || echo '')
          [ -z "$LAST" ] && echo "[cfg-diff][baseline] No timeline yet" && exit 0
          PHASE=$(printf '%s' "$LAST" | sed -E 's/.*"phase":"([^"]+)".*/\1/')
          MD5=$(printf '%s' "$LAST" | sed -E 's/.*"wp_config_md5":"([^"]+)".*/\1/')
          if [ -n "$MD5" ] && [ "$MD5" != "${PREV_WP_CFG_MD5:-}" ]; then
            echo "[cfg-diff][$PHASE] wp-config md5 changed prev='${PREV_WP_CFG_MD5:-none}' new='$MD5'"
            ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CFG_PATH="";
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
            if [ -n "$CFG_PATH" ]; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$CFG_PATH' '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; sed -E -i \"s/(DB_(NAME|USER|PASSWORD)'?, *')[^']*'/\\1***'/Ig\" '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; head -n 25 '$CFG_PATH.ci.sanitized.tmp'; echo '...'; tail -n 25 '$CFG_PATH.ci.sanitized.tmp'" > diff_${PHASE}_wp-config_sanitized.txt 2>/dev/null || true
              echo "[cfg-diff][$PHASE] captured sanitized head/tail"
            fi
          fi
          echo "PREV_WP_CFG_MD5=$MD5" >> $GITHUB_ENV
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Prune stale LiteSpeed disabled copies (keep newest 2)
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          echo "[prune] Checking for stale litespeed-cache.disabled.* directories"
          # Retain newest N (default 2) disabled copies, remove older ones.
          RETAIN_COUNT=${RETAIN_DISABLED_LITESPEED:-2}
          # Remote script: escape all $ for remote evaluation (except injected HOSTINGER_PATH / RETAIN_COUNT)
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "P='$HOSTINGER_PATH'; R='$RETAIN_COUNT'; CD=\"\$P/wp-content/plugins\"; if [ ! -d \"\$CD\" ]; then echo '[prune] Plugin dir missing:' \"\$CD\"; exit 0; fi; cd \"\$CD\" || exit 0; BASE='litespeed-cache.disabled'; if [ -d \"\$BASE\" ]; then KEEP_BASE=1; else KEEP_BASE=0; fi; TS_LIST=\"\$(ls -1dt litespeed-cache.disabled.[0-9]* 2>/dev/null || true)\"; if [ -z \"\$TS_LIST\" ] && [ \$KEEP_BASE -eq 0 ]; then echo '[prune] Nothing to prune'; exit 0; fi; CNT_TS=\"\$(printf '%s\n' \"\$TS_LIST\" | grep -c . || true)\"; TOTAL=\$CNT_TS; if [ \$KEEP_BASE -eq 1 ]; then TOTAL=\$((TOTAL+1)); fi; echo \"[prune] Found \$TOTAL disabled copies (timestamped=\$CNT_TS base=\$KEEP_BASE) retain \$R (+base always if present)\"; if [ \$KEEP_BASE -eq 1 ]; then printf '%s\n' \"\$BASE\" \$TS_LIST | nl -ba | sed 's/^/[prune][all] /'; else printf '%s\n' \"\$TS_LIST\" | nl -ba | sed 's/^/[prune][all] /'; fi; if [ \$CNT_TS -le \$R ]; then echo '[prune] Nothing to prune (timestamped within retention)'; exit 0; fi; DEL_LIST=\"\$(printf '%s\n' \"\$TS_LIST\" | tail -n +\$((R + 1)))\"; printf '%s\n' \"\$DEL_LIST\" | while IFS= read -r d; do [ -n \"\$d\" ] && echo \"[prune][del] \$d\" && rm -rf -- \"\$d\"; done" || true
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          RETAIN_DISABLED_LITESPEED: ${{ secrets.RETAIN_DISABLED_LITESPEED }}

      - name: Disable requested plugins (rename folders)
        # Skip during audit-only or dry-run (dry-run should not mutate remote)
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          # Priority: manual workflow_dispatch input > secret fallback
            if [ -z "$DISABLE_PLUGINS_INPUT" ] && [ -z "$DISABLE_PLUGINS_SECRET" ]; then
              echo "[plugins] No disable list provided (input or secret); skipping."; exit 0;
            fi
            if [ -n "$DISABLE_PLUGINS_INPUT" ]; then
              LIST="$DISABLE_PLUGINS_INPUT"
              SOURCE="input"
            else
              LIST="$DISABLE_PLUGINS_SECRET"
              SOURCE="secret"
            fi
          echo "[plugins] Source=$SOURCE List=$LIST"
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          IFS=',' read -r -a PLUGS <<<"$LIST"
          for p in "${PLUGS[@]}"; do
            p=$(echo "$p" | xargs) # trim whitespace
            [ -z "$p" ] && continue
            case "$p" in 
              .*|*/*) echo "[plugins] Skip invalid slug '$p'"; continue;;
            esac
            SRC="$HOSTINGER_PATH/wp-content/plugins/$p"
            DST="$SRC.disabled"
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "if [ -d '$SRC' ]; then if [ -d '$DST' ]; then echo '[plugins] Already disabled: $p'; else mv '$SRC' '$DST' && echo '[plugins] Disabled $p'; fi; else echo '[plugins] Not found: $p'; fi" || true
          done
        env:
          DISABLE_PLUGINS_INPUT: ${{ github.event.inputs.disable_plugins }}
          DISABLE_PLUGINS_SECRET: ${{ secrets.DISABLE_PLUGINS }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Force disable problematic plugins (safety net)
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          # Intentionally force-disable litespeed-cache (root cause of 500 via md5_file on missing tmp assets)
          FORCE_LIST="litespeed-cache"
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          for p in $FORCE_LIST; do
            SRC="$HOSTINGER_PATH/wp-content/plugins/$p"
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$SRC' ]"; then
              TS=$(date +%s)
              DST="$SRC.disabled.$TS"
              echo "[force-disable] Renaming active $p -> $(basename "$DST")"
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mv '$SRC' '$DST'" || echo "[force-disable][warn] Failed to rename $p (permissions?)"
            else
              echo "[force-disable] $p not present (already disabled or absent)"
            fi
          done
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Health checkpoint (post_plugin_disables)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          URL="${PRODUCTION_URL%/}/"
            PHASE="post_plugin_disables"; STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          curl -s -S -D hc_${PHASE}_headers.txt -o hc_${PHASE}_body.html -w '%{http_code}' "$URL" > hc_${PHASE}_code.txt || true
          CODE=$(cat hc_${PHASE}_code.txt 2>/dev/null || echo 0)
          echo "[health][$PHASE] code=$CODE"
          CFG_PATH=""; ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php";
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          CFG_LINES=0; CFG_MD5=""; if [ -n "$CFG_PATH" ]; then CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG_PATH' 2>/dev/null" || echo 0); CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG_PATH' 2>/dev/null | awk '{print $1}'" || echo unknown); fi
          echo "{\"phase\":\"$PHASE\",\"code\":$CODE,\"ts\":\"$STAMP\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$CODE" -ne 200 ]; then for lf in debug.log php-error.log error_log; do if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$lf' ]"; then ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$lf'" > "hc_${PHASE}_$lf" 2>/dev/null || true; fi; done; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Config diff & snapshot tracker (post_plugin_disables)
        if: ${{ always() && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          LAST=$(tail -n1 health_timeline_raw.jsonl 2>/dev/null || echo '')
            PHASE=$(printf '%s' "$LAST" | sed -E 's/.*"phase":"([^"]+)".*/\1/')
          MD5=$(printf '%s' "$LAST" | sed -E 's/.*"wp_config_md5":"([^"]+)".*/\1/')
          if [ -n "$MD5" ] && [ "$MD5" != "${PREV_WP_CFG_MD5:-}" ]; then
            echo "[cfg-diff][$PHASE] wp-config md5 changed prev='${PREV_WP_CFG_MD5:-none}' new='$MD5'"
            ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CFG_PATH="";
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
            if [ -n "$CFG_PATH" ]; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$CFG_PATH' '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; sed -E -i \"s/(DB_(NAME|USER|PASSWORD)'?, *')[^']*'/\\1***'/Ig\" '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; head -n 25 '$CFG_PATH.ci.sanitized.tmp'; echo '...'; tail -n 25 '$CFG_PATH.ci.sanitized.tmp'" > diff_${PHASE}_wp-config_sanitized.txt 2>/dev/null || true
            fi
          fi
          echo "PREV_WP_CFG_MD5=$MD5" >> $GITHUB_ENV
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Restore critical plugins if accidentally disabled
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          # Some plugins are essential for site rendering; if they were renamed (_off_<slug>) restore them.
          CRITICAL_SLUGS=(elementor elementor-pro jet-engine jet-elements jet-theme-core jet-menu jet-tabs jetformbuilder woocommerce wordpress-seo)
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          for slug in "${CRITICAL_SLUGS[@]}"; do
            OFF_DIR="$HOSTINGER_PATH/wp-content/plugins/_off_${slug}"
            LIVE_DIR="$HOSTINGER_PATH/wp-content/plugins/${slug}"
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$OFF_DIR' ]"; then
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$LIVE_DIR' ]"; then
                echo "[restore-critical][skip] Live dir exists for $slug (off copy retained)";
              else
                echo "[restore-critical] Restoring $slug (_off_ -> live)";
                ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mv '$OFF_DIR' '$LIVE_DIR'" || echo "[restore-critical][warn] Failed to restore $slug";
              fi
            fi
          done
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Guard & (if needed) recover wp-config before sanitation
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        id: cfg_guard
        run: |
          set -e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          ROOT_CFG="$HOSTINGER_PATH/wp-config.php"
            PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"
          CFG=""
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then
            CFG="$ROOT_CFG"
          elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then
            CFG="$PARENT_CFG"
          else
            SEARCH_BASE="$(dirname "$HOSTINGER_PATH")"
            CFG=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "find '$SEARCH_BASE' -maxdepth 4 -type f -name wp-config.php 2>/dev/null | head -n1" || true)
          fi
          if [ -z "$CFG" ]; then
            echo "[cfg-guard] No wp-config.php found; skipping guard (cannot enforce)";
            exit 0
          fi
          echo "[cfg-guard] Target config: $CFG"
          # Raised fallback threshold reflecting stable baseline (~110 lines observed)
          MIN_LINES=${MIN_CONFIG_LINES:-95}
          REQUIRED_TOKENS=(DB_NAME DB_USER AUTH_KEY table_prefix)
          LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG' 2>/dev/null" || echo 0)
          SIZE=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "stat -c %s '$CFG' 2>/dev/null" || echo 0)
          MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG' 2>/dev/null | awk '{print $1}'" || echo unknown)
          echo "[cfg-guard] Current metrics: lines=$LINES size=$SIZE md5=$MD5"
          MISSING=()
          for t in "${REQUIRED_TOKENS[@]}"; do
            if ! ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -q '$t' '$CFG'"; then
              MISSING+=("$t")
            fi
          done
          if [ ${#MISSING[@]} -eq 0 ]; then
            echo "[cfg-guard] Required tokens present."
          else
            echo "[cfg-guard][warn] Missing tokens: ${MISSING[*]}"
          fi
          RECOVERED=false
          RECOVER_SRC=""
          if { [ "$LINES" -lt "$MIN_LINES" ] || [ ${#MISSING[@]} -gt 0 ]; }; then
            echo "[cfg-guard][warn] Config below thresholds (lines<$MIN_LINES or missing tokens); attempting recovery from backups"
            CANDIDATES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1t '$CFG.ci.bak.'* 2>/dev/null || true")
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$CFG.bak' ]"; then
              CANDIDATES="$CANDIDATES $CFG.bak"
            fi
            if [ -z "$CANDIDATES" ]; then
              echo "[cfg-guard][error] No backups available for recovery"; EXIT_FAIL=1
            else
              for cand in $CANDIDATES; do
                [ -z "$cand" ] && continue
                CL=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$cand' 2>/dev/null" || echo 0)
                if [ "$CL" -lt "$MIN_LINES" ]; then echo "[cfg-guard][skip] $cand lines=$CL (<$MIN_LINES)"; continue; fi
                TOK_MISS=false
                for t in "${REQUIRED_TOKENS[@]}"; do
                  if ! ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -q '$t' '$cand'"; then TOK_MISS=true; break; fi
                done
                if [ "$TOK_MISS" = true ]; then echo "[cfg-guard][skip] $cand missing required tokens"; continue; fi
                echo "[cfg-guard][recovery] Restoring from $cand"
                ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$cand' '$CFG'" || { echo "[cfg-guard][error] Restore failed from $cand"; continue; }
                RECOVERED=true; RECOVER_SRC="$cand"; break
              done
              if [ "$RECOVERED" = false ]; then
                echo "[cfg-guard][error] No suitable backup met thresholds"; EXIT_FAIL=1
              else
                LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG' 2>/dev/null" || echo 0)
                SIZE=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "stat -c %s '$CFG' 2>/dev/null" || echo 0)
                MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG' 2>/dev/null | awk '{print $1}'" || echo unknown)
                echo "[cfg-guard][recovery] New metrics: lines=$LINES size=$SIZE md5=$MD5"
              fi
            fi
          fi
          # --- WP_CACHE NORMALIZATION (dedupe & enforce single forced false define) ---
          echo "[cfg-guard] Normalizing WP_CACHE defines (dedupe + force false)"
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "if [ -f '$CFG' ]; then \
            TS=\$(date +%s); cp '$CFG' '$CFG.ci.precache.'\"$TS\"; \
            BEFORE=\$(grep -i 'WP_CACHE' '$CFG' 2>/dev/null | wc -l || echo 0); \
            awk 'BEGIN{IGNORECASE=1} /WP_CACHE/ {next} {print}' '$CFG' > '$CFG.ci.tmp' && mv '$CFG.ci.tmp' '$CFG'; \
            printf '%s\n' '// Managed by CI: enforce single WP_CACHE false' 'if (!defined("WP_CACHE")) { define("WP_CACHE", false); }' >> '$CFG'; \
            AFTER=\$(grep -i 'WP_CACHE' '$CFG' 2>/dev/null | wc -l || echo 0); \
            echo '[cfg-guard][wp_cache] before='$BEFORE' after='$AFTER; \
          else echo '[cfg-guard][wp_cache][warn] File missing (skip)'; fi" || echo "[cfg-guard][wp_cache][error] Remote normalization failed"
          # Refresh metrics post-normalization
          LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG' 2>/dev/null" || echo 0)
          SIZE=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "stat -c %s '$CFG' 2>/dev/null" || echo 0)
          MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG' 2>/dev/null | awk '{print $1}'" || echo unknown)
          TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          MJSON_ITEMS=""
          for m in "${MISSING[@]}"; do
            [ -z "$m" ] && continue
            if [ -z "$MJSON_ITEMS" ]; then MJSON_ITEMS="\"$m\""; else MJSON_ITEMS="$MJSON_ITEMS,\"$m\""; fi
          done
          [ -z "$MJSON_ITEMS" ] && MJSON='[]' || MJSON="[$MJSON_ITEMS]"
          printf '{"path":"%s","lines":%s,"size":%s,"md5":"%s","recovered":%s,"recovered_from":"%s","missing_tokens":%s,"min_lines_threshold":%s,"timestamp":"%s"}\n' \
            "$CFG" "$LINES" "$SIZE" "$MD5" "$RECOVERED" "$RECOVER_SRC" "$MJSON" "$MIN_LINES" "$TS" > wp-config-metrics.json
          echo "[cfg-guard] Metrics JSON written: $(wc -c < wp-config-metrics.json) bytes"
          echo "CFG_LINES=$LINES" >> $GITHUB_ENV
          echo "CFG_RECOVERED=$RECOVERED" >> $GITHUB_ENV
          echo "CFG_RECOVER_SRC=$RECOVER_SRC" >> $GITHUB_ENV
          if [ "${EXIT_FAIL:-0}" = 1 ]; then
            echo "[cfg-guard][fatal] Guard conditions failed and no recovery succeeded. Failing job to prevent further damage." >&2
            exit 1
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          MIN_CONFIG_LINES: ${{ secrets.MIN_CONFIG_LINES }}

      - name: Upload wp-config guard metrics
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: wp-config-metrics
          path: wp-config-metrics.json
          if-no-files-found: warn
          retention-days: 7

      - name: Neutralize cache drop-ins if LiteSpeed disabled
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          LSP_ORIG="$HOSTINGER_PATH/wp-content/plugins/litespeed-cache"
          LSP_DISABLED_BASE="$LSP_ORIG.disabled"
          # Consider LiteSpeed 'disabled' if any of these exist:
          #  - litespeed-cache.disabled (base)
          #  - litespeed-cache.disabled.<timestamp>
          #  - _off_litespeed-cache
          #  - litespeed-cache.disabled.* (general)
          LSP_DISABLED_DETECTED=0
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$(dirname "$LSP_ORIG")' 2>/dev/null | grep -Eq '^litespeed-cache\.disabled(\.[0-9]+)?$'"; then
            LSP_DISABLED_DETECTED=1
          elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$(dirname "$LSP_ORIG")/_off_litespeed-cache' ]"; then
            LSP_DISABLED_DETECTED=1
          fi
          if [ $LSP_DISABLED_DETECTED -eq 1 ]; then
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$LSP_ORIG' ]"; then
              TS=$(date +%s)
              echo "[dropins] Conflict: active litespeed-cache plus disabled variant(s). Force-renaming active copy -> litespeed-cache.disabled.$TS"
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mv '$LSP_ORIG' '$LSP_ORIG.disabled.$TS'" || echo "[dropins][warn] Force rename failed (permissions?)"
            fi
            echo "[dropins] LiteSpeed considered disabled (variant detected); neutralizing related drop-ins..."
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "if [ -f '$HOSTINGER_PATH/wp-content/object-cache.php' ] && grep -qi litespeed '$HOSTINGER_PATH/wp-content/object-cache.php'; then mv -f '$HOSTINGER_PATH/wp-content/object-cache.php' '$HOSTINGER_PATH/wp-content/object-cache.php.disabled' && echo '[dropins] Disabled object-cache.php (LiteSpeed)'; else echo '[dropins] object-cache.php absent or no LiteSpeed signature'; fi" || true
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "if [ -f '$HOSTINGER_PATH/wp-content/advanced-cache.php' ]; then if grep -qi litespeed '$HOSTINGER_PATH/wp-content/advanced-cache.php'; then mv -f '$HOSTINGER_PATH/wp-content/advanced-cache.php' '$HOSTINGER_PATH/wp-content/advanced-cache.php.disabled' && echo '[dropins] Renamed advanced-cache.php -> advanced-cache.php.disabled'; else echo '[dropins] advanced-cache.php present but no LiteSpeed signature'; fi; else echo '[dropins] No advanced-cache.php present'; fi" || true
          else
            echo "[dropins] LiteSpeed plugin directory not (yet) disabled; skipping drop-in neutralization (still enforcing WP_CACHE=false)."
          fi
          ROOT_CFG="$HOSTINGER_PATH/wp-config.php"
          PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"
          CFG=""
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then
            CFG="$ROOT_CFG"
          elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then
            CFG="$PARENT_CFG"
          else
            SEARCH_BASE="$(dirname "$HOSTINGER_PATH")"
            CFG=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "find '$SEARCH_BASE' -maxdepth 4 -type f -name wp-config.php 2>/dev/null | head -n1" || true)
          fi
          if [ -z "$CFG" ]; then
            echo "[dropins] wp-config.php not found (cannot enforce WP_CACHE)";
          else
            echo "[dropins] Sanitizing WP_CACHE defines in: $CFG"
            # Create timestamped backup before modifying (retain last 5)
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "if [ -f '$CFG' ]; then TS=\$(date +%s); cp '$CFG' '$CFG.ci.bak.'\"\$TS\"; ls -1t '$CFG.ci.bak.'* 2>/dev/null | tail -n +6 | xargs -r rm -f --; fi" || echo '[dropins][cfg] Backup step failed (proceeding)'
            # Remote sanitation (escaped inline script)
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "TARGET='$CFG'; \
              if [ -z \"\$TARGET\" ] || [ ! -f \"\$TARGET\" ]; then echo '[dropins][cfg] Missing file: '\$TARGET; exit 0; fi; \
              if [ ! -s \"\$TARGET\" ]; then echo '[dropins][cfg] Empty file: '\$TARGET; exit 0; fi; \
              [ -f \"\$TARGET.ci.tmp\" ] && echo '[dropins][cfg] Removing stray temp: '\$TARGET.ci.tmp && rm -f \"\$TARGET.ci.tmp\" || true; \
              LINES_BEFORE=\$(wc -l < \"\$TARGET\" 2>/dev/null || echo 0); SIZE_BEFORE=\$(stat -c %s \"\$TARGET\" 2>/dev/null || echo 0); \
              echo '[dropins][cfg] (remote) evaluating file: '\$TARGET' (lines='\$LINES_BEFORE' size='\$SIZE_BEFORE')'; \
              echo '[dropins][cfg] BEFORE:'; grep -n -i WP_CACHE \"\$TARGET\" || echo '[dropins][cfg] (none)'; \
              tmp=\"\$TARGET.ci.strip\"; awk 'BEGIN{IGNORECASE=1} /WP_CACHE/ {next} {print}' \"\$TARGET\" > \"\$tmp\" && mv \"\$tmp\" \"\$TARGET\"; \
              sed -i -E '/^[[:space:]]*\\/\\/[[:space:]]+(Managed|Added) by CI/d' \"\$TARGET\"; \
              printf '%s\n' '// Managed by CI: force disable page/object cache while troubleshooting' 'if (!defined(\"WP_CACHE\")) { define(\"WP_CACHE\", false); }' >> \"\$TARGET\"; \
              LINES_AFTER=\$(wc -l < \"\$TARGET\" 2>/dev/null || echo 0); SIZE_AFTER=\$(stat -c %s \"\$TARGET\" 2>/dev/null || echo 0); \
              echo '[dropins][cfg] AFTER CLEAN (lines='\$LINES_AFTER' size='\$SIZE_AFTER'):'; grep -n -i WP_CACHE \"\$TARGET\" || echo '[dropins][cfg] (unexpected none)'; \
              if [ \"\$LINES_AFTER\" -lt 20 ] && [ \"\$LINES_BEFORE\" -gt 20 ]; then echo '[dropins][cfg][warn] Line count dropped suspiciously (restoring backup)'; LAST_BAK=\$(ls -1t \"\$TARGET.ci.bak.\"* 2>/dev/null | head -n1); [ -n \"\$LAST_BAK\" ] && cp \"\$LAST_BAK\" \"\$TARGET\" && echo '[dropins][cfg] Restored from '\$LAST_BAK; fi" || echo "[dropins][cfg] Remote sanitation failed (exit $?)"
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Health checkpoint (post_dropin_neutralization)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          PHASE="post_dropin_neutralization"; STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          URL="${PRODUCTION_URL%/}/"; curl -s -S -D hc_${PHASE}_headers.txt -o hc_${PHASE}_body.html -w '%{http_code}' "$URL" > hc_${PHASE}_code.txt || true
          CODE=$(cat hc_${PHASE}_code.txt 2>/dev/null || echo 0)
          echo "[health][$PHASE] code=$CODE"
          CFG_PATH=""; ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php";
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          CFG_LINES=0; CFG_MD5=""; if [ -n "$CFG_PATH" ]; then CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG_PATH' 2>/dev/null" || echo 0); CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG_PATH' 2>/dev/null | awk '{print $1}'" || echo unknown); fi
          echo "{\"phase\":\"$PHASE\",\"code\":$CODE,\"ts\":\"$STAMP\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$CODE" -ne 200 ]; then for lf in debug.log php-error.log error_log; do if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$lf' ]"; then ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$lf'" > "hc_${PHASE}_$lf" 2>/dev/null || true; fi; done; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Config diff & snapshot tracker (post_dropin_neutralization)
        if: ${{ always() && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          LAST=$(tail -n1 health_timeline_raw.jsonl 2>/dev/null || echo '')
          PHASE=$(printf '%s' "$LAST" | sed -E 's/.*"phase":"([^"]+)".*/\1/')
          MD5=$(printf '%s' "$LAST" | sed -E 's/.*"wp_config_md5":"([^"]+)".*/\1/')
          if [ -n "$MD5" ] && [ "$MD5" != "${PREV_WP_CFG_MD5:-}" ]; then
            echo "[cfg-diff][$PHASE] wp-config md5 changed prev='${PREV_WP_CFG_MD5:-none}' new='$MD5'"
            ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CFG_PATH="";
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
            if [ -n "$CFG_PATH" ]; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$CFG_PATH' '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; sed -E -i \"s/(DB_(NAME|USER|PASSWORD)'?, *')[^']*'/\\1***'/Ig\" '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; head -n 25 '$CFG_PATH.ci.sanitized.tmp'; echo '...'; tail -n 25 '$CFG_PATH.ci.sanitized.tmp'" > diff_${PHASE}_wp-config_sanitized.txt 2>/dev/null || true
            fi
          fi
          echo "PREV_WP_CFG_MD5=$MD5" >> $GITHUB_ENV
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Snapshot wp-config (post-sanitization)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set -e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          ROOT_CFG="$HOSTINGER_PATH/wp-config.php"
          PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"
          TARGET=""
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then
            TARGET="$ROOT_CFG"
          elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then
            TARGET="$PARENT_CFG"
          else
            BASE_DIR="$(dirname "$HOSTINGER_PATH")"
            TARGET=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "find '$BASE_DIR' -maxdepth 4 -type f -name wp-config.php 2>/dev/null | head -n1" || true)
          fi
          if [ -z "$TARGET" ]; then
            echo "[snapshot][warn] wp-config.php not found for snapshot"
            exit 0
          fi
          echo "[snapshot] Target: $TARGET"
          LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$TARGET' 2>/dev/null" || echo 0)
            SIZE=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "stat -c %s '$TARGET' 2>/dev/null" || echo 0)
          MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$TARGET' 2>/dev/null | awk '{print $1}'" || echo unknown)
          WP_CACHE_COUNT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -i 'WP_CACHE' '$TARGET' 2>/dev/null | grep -c 'define' || true")
          WP_CACHE_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -n -i 'WP_CACHE' '$TARGET' 2>/dev/null" || true)
          printf '%s\n' "$WP_CACHE_LINES" | sed 's/^/[snapshot][grep]/'
          # Pull a trimmed copy (omit salts for brevity) by removing lines containing AUTH_KEY, SECURE_AUTH_KEY etc.
          TMP_LOCAL=wp-config.snapshot.post-sanitize.php
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cat '$TARGET'" \
            | sed -E '/AUTH_KEY|SECURE_AUTH_KEY|LOGGED_IN_KEY|NONCE_KEY|AUTH_SALT|SECURE_AUTH_SALT|LOGGED_IN_SALT|NONCE_SALT/d' > "$TMP_LOCAL" || true
          head -n 40 "$TMP_LOCAL" | sed 's/^/[snapshot][head]/'
          tail -n 40 "$TMP_LOCAL" | sed 's/^/[snapshot][tail]/'
          printf '{"path":"%s","lines":%s,"size":%s,"md5":"%s","wp_cache_defines":%s,"timestamp":"%s"}' \
             "$TARGET" "$LINES" "$SIZE" "$MD5" "$WP_CACHE_COUNT" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
             > wp-config.snapshot.post-sanitize.json
          echo "[snapshot] JSON: $(cat wp-config.snapshot.post-sanitize.json)"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Upload wp-config snapshot (post-sanitization)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: wp-config-post-sanitize
          path: |
            wp-config.snapshot.post-sanitize.php
            wp-config.snapshot.post-sanitize.json
          if-no-files-found: warn
          retention-days: 5

      - name: Scan for residual LiteSpeed references (post-neutralization)
        if: ${{ github.event.inputs.audit != 'true' }}
        run: |
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          echo "[scan] Checking for residual LiteSpeed strings in wp-config.php, mu-plugins, object-cache, advanced-cache"
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -RIn -E 'LiteSpeed|litespeed' '$HOSTINGER_PATH/wp-config.php' '$HOSTINGER_PATH/wp-content/object-cache.php' '$HOSTINGER_PATH/wp-content/advanced-cache.php' '$HOSTINGER_PATH/wp-content/mu-plugins' 2>/dev/null | head -n 120" | sed 's/^/[scan]/' || echo '[scan] No references (or files missing)'
          echo "[scan] Done (showing first 120 matches if any)."
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Aggressive LiteSpeed neutralization & OPcache reset
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          echo "[ls-aggressive] Starting aggressive neutralization phase"
          # Capture sanitized path locally to embed into remote scripts (prevents empty $HOSTINGER_PATH on remote)
          HP="$HOSTINGER_PATH"
          # 1. Replace any LiteSpeed object-cache drop-in with inert core cache loader (proper quoting)
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "OC=\"$HP/wp-content/object-cache.php\"; if [ -f \"$HP/wp-content/object-cache.php\" ] && grep -qi litespeed \"$HP/wp-content/object-cache.php\"; then cp \"$HP/wp-content/object-cache.php\" \"$HP/wp-content/object-cache.php.ci.bak.$(date +%s)\"; { printf '%s\\n' '<?php' '// Inert object-cache stub inserted by CI' 'require_once ABSPATH . WPINC . "/cache.php";' ; } > \"$HP/wp-content/object-cache.php\"; echo '[ls-aggressive][object-cache] Replaced LiteSpeed object-cache.php with inert stub'; else echo '[ls-aggressive][object-cache] No LiteSpeed signature present or file missing'; fi" || true
          # 2. Delete all disabled litespeed-cache variant directories to prevent autoloading old compiled code
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "PLUGDIR=\"$HP/wp-content/plugins\"; if [ -d \"$HP/wp-content/plugins\" ]; then cd \"$HP/wp-content/plugins\"; for d in litespeed-cache.disabled* _off_litespeed-cache; do [ -d \"$d\" ] && echo '[ls-aggressive][purge] Removing' \"$d\" && rm -rf -- \"$d\"; done; fi" || true
          # 3. Ensure primary litespeed-cache directory is a minimal stub (not real code)
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "STUB=\"$HP/wp-content/plugins/litespeed-cache\"; MAIN=\"$HP/wp-content/plugins/litespeed-cache/litespeed-cache.php\"; if [ -d \"$HP/wp-content/plugins/litespeed-cache\" ]; then if grep -q optimizer.cls.php -R \"$HP/wp-content/plugins/litespeed-cache\" 2>/dev/null; then echo '[ls-aggressive][warn] Real LiteSpeed code remnants found; purging'; rm -rf -- \"$HP/wp-content/plugins/litespeed-cache\"; fi; fi; if [ ! -d \"$HP/wp-content/plugins/litespeed-cache\" ]; then mkdir -p \"$HP/wp-content/plugins/litespeed-cache\"; { printf '%s\\n' '<?php' '/* CI LiteSpeed Stub */' 'if(!defined("LITESPEED_DISABLE_ALL"))define("LITESPEED_DISABLE_ALL",true);return;'; } > \"$HP/wp-content/plugins/litespeed-cache/litespeed-cache.php\"; echo '[ls-aggressive][stub] Stub plugin created'; else echo '[ls-aggressive][stub] Directory exists (assumed stub)'; fi" || true
          # 4. OPcache reset via ephemeral PHP script (best-effort)
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "PHP_BIN=php; if command -v php >/dev/null 2>&1; then echo '<?php opcache_reset(); echo "OPCACHE_RESET_OK\\n";' > \"$HP/opcache_reset_ci.php\"; OUT=$(php \"$HP/opcache_reset_ci.php\" 2>&1 || true); echo '[ls-aggressive][opcache]' \"$OUT\"; rm -f \"$HP/opcache_reset_ci.php\" || true; else echo '[ls-aggressive][opcache] php binary not available'; fi" || true
          # 5. Deep search for any remaining optimizer file
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "find \"$HP/wp-content\" -maxdepth 5 -type f -name optimizer.cls.php 2>/dev/null | sed 's#^#[ls-aggressive][residual] #' || true" || true
          echo "[ls-aggressive] Completed aggressive neutralization phase"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Health checkpoint (post_aggressive_neutralization)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          PHASE="post_aggressive_neutralization"; STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          URL="${PRODUCTION_URL%/}/"; curl -s -S -D hc_${PHASE}_headers.txt -o hc_${PHASE}_body.html -w '%{http_code}' "$URL" > hc_${PHASE}_code.txt || true
          CODE=$(cat hc_${PHASE}_code.txt 2>/dev/null || echo 0)
          echo "[health][$PHASE] code=$CODE"
          CFG_PATH=""; ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php";
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          CFG_LINES=0; CFG_MD5=""; if [ -n "$CFG_PATH" ]; then CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG_PATH' 2>/dev/null" || echo 0); CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG_PATH' 2>/dev/null | awk '{print $1}'" || echo unknown); fi
          echo "{\"phase\":\"$PHASE\",\"code\":$CODE,\"ts\":\"$STAMP\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$CODE" -ne 200 ]; then for lf in debug.log php-error.log error_log; do if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$lf' ]"; then ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$lf'" > "hc_${PHASE}_$lf" 2>/dev/null || true; fi; done; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Config diff & snapshot tracker (post_aggressive_neutralization)
        if: ${{ always() && github.event.inputs.audit != 'true' }}
        run: |
          set +e
          LAST=$(tail -n1 health_timeline_raw.jsonl 2>/dev/null || echo '')
          PHASE=$(printf '%s' "$LAST" | sed -E 's/.*"phase":"([^"]+)".*/\1/')
          MD5=$(printf '%s' "$LAST" | sed -E 's/.*"wp_config_md5":"([^"]+)".*/\1/')
          if [ -n "$MD5" ] && [ "$MD5" != "${PREV_WP_CFG_MD5:-}" ]; then
            echo "[cfg-diff][$PHASE] wp-config md5 changed prev='${PREV_WP_CFG_MD5:-none}' new='$MD5'"
            ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CFG_PATH="";
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
            if [ -n "$CFG_PATH" ]; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$CFG_PATH' '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; sed -E -i \"s/(DB_(NAME|USER|PASSWORD)'?, *')[^']*'/\\1***'/Ig\" '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; head -n 25 '$CFG_PATH.ci.sanitized.tmp'; echo '...'; tail -n 25 '$CFG_PATH.ci.sanitized.tmp'" > diff_${PHASE}_wp-config_sanitized.txt 2>/dev/null || true
            fi
          fi
          echo "PREV_WP_CFG_MD5=$MD5" >> $GITHUB_ENV
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Stop after audit (audit-only)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.audit == 'true' }}
        run: |
          echo "[audit] Audit-only run requested; skipping rsync and marker steps.";
          exit 0

      - name: Rsync to server (supports dry run)
        if: ${{ github.event.inputs.audit != 'true' }}
        run: |
          # --- Commit metadata injection & diagnostics BEFORE rsync ---
          SHORT_SHA=${GITHUB_SHA::7}
          COMMIT="$GITHUB_SHA"
          # Dynamic diagnostic PHP heartbeat (reveals docroot + partial listing on production)
          printf '%s\n' "<?php" > deploy-heartbeat.php
          printf '%s\n' '$meta = [' >> deploy-heartbeat.php
          printf '%s\n' "  'commit' => '$COMMIT'," >> deploy-heartbeat.php
          printf '%s\n' "  'short' => '$SHORT_SHA'," >> deploy-heartbeat.php
          printf '%s\n' "  'generated_at' => gmdate('c')," >> deploy-heartbeat.php
          printf '%s\n' "  'pwd' => getcwd()," >> deploy-heartbeat.php
          printf '%s\n' "  'docroot' => \\$_SERVER['DOCUMENT_ROOT'] ?? null," >> deploy-heartbeat.php
          printf '%s\n' "  'scan' => array_slice(scandir(__DIR__), 0, 40)," >> deploy-heartbeat.php
          printf '%s\n' "  'php_version' => PHP_VERSION," >> deploy-heartbeat.php
          printf '%s\n' "];" >> deploy-heartbeat.php
          printf '%s\n' "header('Content-Type: application/json');" >> deploy-heartbeat.php
          printf '%s\n' 'echo json_encode($meta);' >> deploy-heartbeat.php
          # Plain text probe inside wp-content to confirm rsync path alignment
          mkdir -p wp-content || true
          echo "$COMMIT" > "wp-content/ci_probe_${SHORT_SHA}.txt"
          # Generate mu-plugin commit marker (footer HTML comment)
          mkdir -p wp-content/mu-plugins || true
          cat > wp-content/mu-plugins/commit-marker.php <<EOF
<?php
/**
 * Plugin Name: Deployment Commit Marker
 * Description: Outputs current deployed commit hash in the HTML footer.
 */
if (!defined('ABSPATH')) { return; }
add_action('wp_footer', function(){ echo "<!-- DEPLOY_COMMIT: $SHORT_SHA ($COMMIT) -->\n"; }, 9999);
EOF
          # Base rsync excludes
          # Sanitize HOSTINGER_PATH (remove trailing CR/LF/whitespace) for consistency
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          if [ "$CLEAN_PATH" != "$HOSTINGER_PATH" ]; then
            echo "[deploy] Trimmed HOSTINGER_PATH -> '$CLEAN_PATH'"
          fi
          HOSTINGER_PATH="$CLEAN_PATH"
          RSYNC_EXCLUDES=(
          ".git" ".github" ".devcontainer" "node_modules" "vendor" "*.log" "*.sql" "wp-config-local.php" "wp-content/cache" "wp-content/uploads" "wp-content/upgrade" ".DS_Store" "**/.DS_Store"
            "wp-content/mu-plugins.disabled" "wp-content/plugins.disabled" "wp-content/plugins.off" "wp-content/themes.off"
            "aktonz-local-copy" # local backup snapshot, never deploy
            "wp-content/plugins/litespeed-cache" # exclude problematic LiteSpeed plugin entirely (neutralized)
          )

          # Unless explicitly allowed, protect remote wp-config.php from overwrite
          if [ "${DEPLOY_WP_CONFIG:-false}" != "true" ]; then
            RSYNC_EXCLUDES+=("wp-config.php")
            echo "[deploy] Excluding wp-config.php (set secret DEPLOY_WP_CONFIG=true to deploy it)"
          else
            echo "[deploy] WARNING: wp-config.php will be deployed (DEPLOY_WP_CONFIG=true)"
          fi

          # Exclude remote-only or dynamically generated directories that are not tracked in the repo but required in production.
          # These paths existed on production (e.g. asset/CSS generation or custom platform code) and were likely removed by --delete, causing homepage fatal errors.
          RSYNC_EXCLUDES+=("core" "storage")
          
          # Guard: detect ONLY top-level accidental self-nested duplicate directories (./name/name) to exclude
          # This avoids excluding legitimate vendor paths like twig/twig inside plugins.
          SELF_NESTED=$(find . -maxdepth 2 -mindepth 2 -type d -regextype posix-extended -regex './([^/]+)/\1$' | sed 's#^./##' | grep -v '^.git' || true)
          if [ -n "$SELF_NESTED" ]; then
            echo "[guard] Detected top-level self-nested duplicate directories; excluding from deployment:" 
            echo "$SELF_NESTED" | sed 's/^/  - /'
            while IFS= read -r d; do
              RSYNC_EXCLUDES+=("$d")
            done <<< "$SELF_NESTED"
          fi

          # Extra safety: never deploy nested aktonz-local-copy copies
          RSYNC_EXCLUDES+=("aktonz-local-copy/aktonz-local-copy")
          EXCLUDE_ARGS=""; for e in "${RSYNC_EXCLUDES[@]}"; do EXCLUDE_ARGS+=" --exclude=$e"; done
          echo "[deploy] Connectivity test (nc)..." || true
          command -v nc >/dev/null && nc -vz -w5 "$HOSTINGER_SSH_HOST" "$HOSTINGER_SSH_PORT" || echo "[warn] nc not available or port check failed (may still work)"
          echo "[deploy] Connectivity test (ssh banner)..." || true
          ssh -o BatchMode=yes -o ConnectTimeout=10 -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" 'echo [remote] ssh ok' || { echo "[error] SSH connection failed. Verify HOSTINGER_* secrets, firewall, and that the key is installed."; exit 1; }
          echo "[deploy] Starting rsync..." 
          # Make --delete optional to avoid wiping remote-only directories (like core/, storage/) by default.
          # Enable deletion only if DELETE_REMOTE is explicitly set to 'true'.
          DELETE_FLAG=""
          if [ "${DELETE_REMOTE:-false}" = "true" ]; then
            DELETE_FLAG="--delete"
            echo "[deploy] Remote deletion enabled (--delete)."
          else
            echo "[deploy] Remote deletion disabled (safer sync). Set secret DELETE_REMOTE=true to enable."
          fi
          RSYNC_DRY=""
          if [ "${DRY_RUN_INPUT}" = "true" ]; then
            RSYNC_DRY="--dry-run -v"
            echo "[deploy] Dry run enabled: rsync will not modify remote (showing planned changes)."
          fi
          rsync -az $RSYNC_DRY -e "ssh -p $HOSTINGER_SSH_PORT" $DELETE_FLAG $EXCLUDE_ARGS ./ "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$HOSTINGER_PATH" || { echo "[error] rsync failed"; exit 1; }
          if [ "${DRY_RUN_INPUT}" = "true" ]; then
            echo "[deploy] NOTE: Dry run completed; skipping marker & post-mutation steps."
          fi
          if [ "${DRY_RUN_INPUT}" != "true" ]; then
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/.deploy-info.json' ]"; then
              PREV_COMMIT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -o '\"commit\":\"[0-9a-f]\{40\}\"' '$HOSTINGER_PATH/.deploy-info.json' | head -n1 | cut -d'\"' -f4 || true")
              if [ -n "$PREV_COMMIT" ] && [ "$PREV_COMMIT" != "$GITHUB_SHA" ]; then
                echo "[deploy][drift] Previous marker commit $PREV_COMMIT differs from current $GITHUB_SHA";
                echo "DRIFT_STATUS=differs" >> $GITHUB_ENV
              else
                echo "[deploy][drift] Previous marker commit matches current (or not found)";
                echo "DRIFT_STATUS=matches" >> $GITHUB_ENV
              fi
            else
              echo "[deploy][drift] No prior remote marker present.";
              echo "DRIFT_STATUS=none" >> $GITHUB_ENV
            fi
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Post-rsync remote listing snapshot
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          SHORT=${GITHUB_SHA::7}
          echo "[listing] Capturing remote directory listings into wp-content for external fetch";
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" \
            "(ls -al '$HOSTINGER_PATH' | head -n 300) > '$HOSTINGER_PATH/wp-content/ci_listing_root_${SHORT}.txt' 2>/dev/null || true; (ls -al '$HOSTINGER_PATH/wp-content' | head -n 300) > '$HOSTINGER_PATH/wp-content/ci_listing_wpcontent_${SHORT}.txt' 2>/dev/null || true" || echo '[listing][warn] remote ls failed'
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Remote DB connectivity diagnostics
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          # Attempt to extract DB constants without exposing full secrets
          CFG_PATH="$HOSTINGER_PATH/wp-config.php"
          if [ ! -f "$CFG_PATH" ]; then
            PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"
            [ -f "$PARENT_CFG" ] && CFG_PATH="$PARENT_CFG"
          fi
          if [ -f "$CFG_PATH" ]; then
            echo "[db-diag] Found wp-config at $CFG_PATH"
            DB_NAME=$(grep -E "define\( *'DB_NAME'" "$CFG_PATH" | sed -E "s/.*'DB_NAME' *, *'([^']+)'.*/\1/" | head -n1 || true)
            DB_USER=$(grep -E "define\( *'DB_USER'" "$CFG_PATH" | sed -E "s/.*'DB_USER' *, *'([^']+)'.*/\1/" | head -n1 || true)
            DB_HOST=$(grep -E "define\( *'DB_HOST'" "$CFG_PATH" | sed -E "s/.*'DB_HOST' *, *'([^']+)'.*/\1/" | head -n1 || true)
            echo "[db-diag] DB_NAME=$DB_NAME DB_USER=$DB_USER DB_HOST=$DB_HOST"
            # Try a short mysql connectivity probe if client exists and password not obviously blank (avoid echoing password)
            if command -v mysql >/dev/null 2>&1; then
              # Extract password length only
              PW_LEN=$(grep -E "define\( *'DB_PASSWORD'" "$CFG_PATH" | sed -E "s/.*'DB_PASSWORD' *, *'([^']*)'.*/\1/" | awk '{print length($0)}')
              echo "[db-diag] DB_PASSWORD length=$PW_LEN";
              if [ -n "$DB_HOST" ] && [ -n "$DB_USER" ] && [ -n "$DB_NAME" ]; then
                timeout 6 bash -c "mysql -h '$DB_HOST' -u '$DB_USER' '$DB_NAME' -e 'SELECT 1' >/dev/null 2>&1" && echo "[db-diag] Basic SELECT 1 succeeded" || echo "[db-diag] MySQL probe failed (check credentials, host, or network)"
              fi
            else
              echo "[db-diag] mysql client not installed on runner"
            fi
          else
            echo "[db-diag] wp-config.php not found (cannot probe)"
          fi
        env:
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Remote path introspection (public listing post-rsync)
        if: ${{ github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          SHORT=${GITHUB_SHA::7}
            echo "[introspect] Writing deeper listing (maxdepth 3) to wp-content/ci_listing_after_${SHORT}.txt"
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" \
            "(echo 'HOSTINGER_PATH=$HOSTINGER_PATH'; pwd; echo '--- ROOT (maxdepth 2 files) ---'; find '$HOSTINGER_PATH' -maxdepth 2 -type f -printf '%p\n' | head -n 120; echo '--- WP-CONTENT (maxdepth 2 files) ---'; find '$HOSTINGER_PATH/wp-content' -maxdepth 2 -type f -printf '%p\n' | head -n 120) > '$HOSTINGER_PATH/wp-content/ci_listing_after_${SHORT}.txt' 2>/dev/null || true" || echo '[introspect][warn] remote introspection failed'
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          DELETE_REMOTE: ${{ secrets.DELETE_REMOTE }}
          DRY_RUN_INPUT: ${{ github.event.inputs.dry_run }}

      - name: Health checkpoint (post_rsync)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set +e
          PHASE="post_rsync"; STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          URL="${PRODUCTION_URL%/}/"; curl -s -S -D hc_${PHASE}_headers.txt -o hc_${PHASE}_body.html -w '%{http_code}' "$URL" > hc_${PHASE}_code.txt || true
          CODE=$(cat hc_${PHASE}_code.txt 2>/dev/null || echo 0)
          echo "[health][$PHASE] code=$CODE"
          CFG_PATH=""; ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php";
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          CFG_LINES=0; CFG_MD5=""; if [ -n "$CFG_PATH" ]; then CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG_PATH' 2>/dev/null" || echo 0); CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG_PATH' 2>/dev/null | awk '{print $1}'" || echo unknown); fi
          echo "{\"phase\":\"$PHASE\",\"code\":$CODE,\"ts\":\"$STAMP\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$CODE" -ne 200 ]; then for lf in debug.log php-error.log error_log; do if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$lf' ]"; then ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$lf'" > "hc_${PHASE}_$lf" 2>/dev/null || true; fi; done; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Config diff & snapshot tracker (post_rsync)
        if: ${{ always() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set +e
          LAST=$(tail -n1 health_timeline_raw.jsonl 2>/dev/null || echo '')
          PHASE=$(printf '%s' "$LAST" | sed -E 's/.*"phase":"([^"]+)".*/\1/')
          MD5=$(printf '%s' "$LAST" | sed -E 's/.*"wp_config_md5":"([^"]+)".*/\1/')
          CODE=$(cat hc_post_rsync_code.txt 2>/dev/null || echo 0)
          if [ -n "$MD5" ] && [ "$MD5" != "${PREV_WP_CFG_MD5:-}" ]; then
            echo "[cfg-diff][$PHASE] wp-config md5 changed prev='${PREV_WP_CFG_MD5:-none}' new='$MD5'"
            ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CFG_PATH="";
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
            if [ -n "$CFG_PATH" ]; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$CFG_PATH' '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; sed -E -i \"s/(DB_(NAME|USER|PASSWORD)'?, *')[^']*'/\\1***'/Ig\" '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; head -n 25 '$CFG_PATH.ci.sanitized.tmp'; echo '...'; tail -n 25 '$CFG_PATH.ci.sanitized.tmp'" > diff_${PHASE}_wp-config_sanitized.txt 2>/dev/null || true
            fi
          fi
          if [ "$CODE" -eq 200 ] && [ -z "${GOOD_WP_CONFIG_REMOTE:-}" ]; then
            ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CFG_PATH="";
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
            if [ -n "$CFG_PATH" ]; then
              SNAP="$CFG_PATH.ci.good.$(date -u +%Y%m%dT%H%M%SZ)"
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$CFG_PATH' '$SNAP' 2>/dev/null || true" || true
              echo "[snapshot][$PHASE] Captured first healthy wp-config snapshot: $SNAP"
              echo "GOOD_WP_CONFIG_REMOTE=$SNAP" >> $GITHUB_ENV
              echo "FIRST_HEALTHY_MD5=$MD5" >> $GITHUB_ENV
              echo "FIRST_HEALTHY_PHASE=$PHASE" >> $GITHUB_ENV
            fi
          fi
          echo "PREV_WP_CFG_MD5=$MD5" >> $GITHUB_ENV
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Collect deployment metadata (remote state)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        id: meta
        run: |
          set -e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          PLUGIN_DIR="$HOSTINGER_PATH/wp-content/plugins"
          DISABLED_PLUGINS_JSON='[]'
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$PLUGIN_DIR' ]"; then
            RAW_LIST=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$PLUGIN_DIR' 2>/dev/null" | grep -E '(\\.disabled(\\.[0-9]+)?$|^_off_)' || true)
            if [ -n "$RAW_LIST" ]; then
              ITEMS=""
              while IFS= read -r line; do
                [ -z "$line" ] && continue
                if [ -z "$ITEMS" ]; then ITEMS="\"$line\""; else ITEMS="$ITEMS,\"$line\""; fi
              done <<< "$RAW_LIST"
              DISABLED_PLUGINS_JSON="[$ITEMS]"
            fi
          fi
          echo "[meta] Disabled plugin variant folders: $DISABLED_PLUGINS_JSON"
          echo "DISABLED_PLUGINS_JSON=$DISABLED_PLUGINS_JSON" >> $GITHUB_ENV
          LSP_COUNT=0
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$PLUGIN_DIR' ]"; then
            LSP_COUNT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$PLUGIN_DIR' 2>/dev/null" | grep -Ec '^litespeed-cache\.disabled(\.[0-9]+)?$|^_off_litespeed-cache$' || true)
          fi
          echo "[meta] LiteSpeed disabled variant count: $LSP_COUNT"
          echo "LITESPEED_DISABLED_VARIANTS=$LSP_COUNT" >> $GITHUB_ENV
          SHORT_SHA=${GITHUB_SHA::7}
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Write public deployment heartbeat
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set -e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          printf '{"commit":"%s","short":"%s","deployed_at":"%s","workflow_run":"%s","repo":"%s","ref":"%s"}\n' \
            "$GITHUB_SHA" "${GITHUB_SHA::7}" "$NOW" "$GITHUB_RUN_ID" "$GITHUB_REPOSITORY" "$GITHUB_REF" > deploy-commit.json
          echo "[heartbeat] Writing deployment marker to remote (dot + public variants)"
          # Dotfile (may be blocked by host security policies for direct HTTP access)
          scp -P "$HOSTINGER_SSH_PORT" deploy-commit.json "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$HOSTINGER_PATH/.deploy-commit.json" || echo "[heartbeat][warn] Failed to write dotfile marker"
          # Public non-dot variant (intended for browser / curl access)
          scp -P "$HOSTINGER_SSH_PORT" deploy-commit.json "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$HOSTINGER_PATH/deploy-commit.json" || echo "[heartbeat][warn] Failed to write public deploy-commit.json"
          # Uploads-based heartbeat (survives some docroot rewrites; nested path reduces chance of host blocking file)
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mkdir -p '$HOSTINGER_PATH/wp-content/uploads/deploy'" || true
          scp -P "$HOSTINGER_SSH_PORT" deploy-commit.json "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$HOSTINGER_PATH/wp-content/uploads/deploy/heartbeat.json" || echo "[heartbeat][warn] Failed to write uploads heartbeat"
          REMOTE_INFO="$HOSTINGER_PATH/.deploy-info.json"
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "if [ -f '$REMOTE_INFO' ]; then cp '$REMOTE_INFO' '$REMOTE_INFO.prev' 2>/dev/null || true; fi"
          scp -P "$HOSTINGER_SSH_PORT" deploy-commit.json "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$REMOTE_INFO" || echo "[heartbeat][warn] Failed to write .deploy-info.json"
          echo "[heartbeat] Marker deployed (commit=${GITHUB_SHA})"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Build code manifest (plugins/themes hashes)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        id: code_manifest
        run: |
          chmod +x scripts/build_code_manifest.sh || true
          OUT=$(bash scripts/build_code_manifest.sh)
          echo "$OUT" | sed 's/^/[code-manifest]/'
          # Export each line KEY=VALUE
          while IFS= read -r line; do
            case "$line" in
              CODE_MANIFEST_HASH=*|PLUGIN_HASHES_JSON=*|THEME_HASHES_JSON=*) echo "$line" >> $GITHUB_ENV;;
            esac
          done <<< "$OUT"
          [ -f code-manifest.json ] && echo "CODE_MANIFEST_FILE=code-manifest.json" >> $GITHUB_ENV || true

      - name: Upload code manifest artifact
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: code-manifest
          path: code-manifest.json
          if-no-files-found: warn
          retention-days: 7

      - name: Post-rsync LiteSpeed purge & stub (prevent optimizer fatals)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set -e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          PLUG_DIR="$HOSTINGER_PATH/wp-content/plugins/litespeed-cache"
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$PLUG_DIR' ]"; then
            TS=$(date +%s)
            echo "[litespeed-post] Active litespeed-cache directory found post-rsync; renaming to disabled variant (.disabled.$TS)"
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mv '$PLUG_DIR' '$PLUG_DIR.disabled.$TS'" || echo "[litespeed-post][warn] Rename failed"
          else
            echo "[litespeed-post] No active litespeed-cache directory (good)"
          fi
          ASSET_DIR="$HOSTINGER_PATH/wp-content/litespeed"
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mkdir -p '$ASSET_DIR/css' '$ASSET_DIR/js' && chmod 755 '$ASSET_DIR' '$ASSET_DIR/css' '$ASSET_DIR/js'" || true
          TMPFILE="lscache-readme.$$"
          cat > "$TMPFILE" <<'EOF'
          This directory is intentionally kept (empty) by CI to prevent LiteSpeed Cache optimizer fatals.
          The plugin is disabled/renamed during deployment. Empty css/ and js/ subfolders satisfy any stray md5_file() probes.
          EOF
          scp -P "$HOSTINGER_SSH_PORT" "$TMPFILE" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$ASSET_DIR/README.ci.txt" 2>/dev/null || true
          rm -f "$TMPFILE" || true
          echo "[litespeed-post] Stubbed asset directory ensured."

          # Create a benign stub litespeed-cache plugin directory if the real plugin is absent, to satisfy any hard-coded includes.
          # This prevents server-level tooling from auto-restoring or attempting to load missing original code paths and throwing fatals.
          STUB_MAIN="$PLUG_DIR/litespeed-cache.php"
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ ! -d '$PLUG_DIR' ]"; then
            echo "[litespeed-post][stub] Creating benign litespeed-cache stub plugin (real plugin disabled)."
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mkdir -p '$PLUG_DIR'" || true
            # Build stub locally then copy to remote for clarity (avoids heredoc PHP tag confusing YAML linters)
            {
              printf '%s\n' '<?php'
              printf '%s\n' '/*'
              printf '%s\n' 'Plugin Name: LiteSpeed Cache (CI Stub)'
              printf '%s\n' 'Description: Placeholder stub created by CI to neutralize real LiteSpeed plugin during troubleshooting. Safe to remove once issue resolved.'
              printf '%s\n' 'Version: 0.0.0-ci-stub'
              printf '%s\n' 'Author: CI Automation'
              printf '%s\n' '*/'
              printf '%s\n' "if ( ! defined('LITESPEED_DISABLE_ALL') ) define('LITESPEED_DISABLE_ALL', true);"
              printf '%s\n' "if ( ! defined('LSCACHE_ADV_CACHE') ) define('LSCACHE_ADV_CACHE', false);"
              printf '%s\n' '// Short-circuit early to avoid loading any real code.'
              printf '%s\n' 'return; // CI stub ends execution.'
            } > stub-lscache.php
            scp -P "$HOSTINGER_SSH_PORT" stub-lscache.php "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$STUB_MAIN" 2>/dev/null || echo "[litespeed-post][stub][warn] Failed to upload stub main file"
            rm -f stub-lscache.php || true
            # Marker file for diagnostics
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "echo 'ci-stub-created $(date -u +%Y-%m-%dT%H:%M:%SZ)' > '$PLUG_DIR/.ci-litespeed-stub'" || true
          else
            # If directory exists after our earlier rename attempt, record its contents for debugging.
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$PLUG_DIR' 2>/dev/null | sed 's/^/[litespeed-post][dir] /'" || true
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Health checkpoint (post_post_rsync_litespeed_purge)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set +e
          PHASE="post_post_rsync_litespeed_purge"; STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          URL="${PRODUCTION_URL%/}/"; curl -s -S -D hc_${PHASE}_headers.txt -o hc_${PHASE}_body.html -w '%{http_code}' "$URL" > hc_${PHASE}_code.txt || true
          CODE=$(cat hc_${PHASE}_code.txt 2>/dev/null || echo 0)
          echo "[health][$PHASE] code=$CODE"
          CFG_PATH=""; ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php";
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          CFG_LINES=0; CFG_MD5=""; if [ -n "$CFG_PATH" ]; then CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG_PATH' 2>/dev/null" || echo 0); CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG_PATH' 2>/dev/null | awk '{print $1}'" || echo unknown); fi
          echo "{\"phase\":\"$PHASE\",\"code\":$CODE,\"ts\":\"$STAMP\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$CODE" -ne 200 ]; then for lf in debug.log php-error.log error_log; do if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$lf' ]"; then ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$lf'" > "hc_${PHASE}_$lf" 2>/dev/null || true; fi; done; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Config diff & snapshot tracker (post_post_rsync_litespeed_purge)
        if: ${{ always() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set +e
          LAST=$(tail -n1 health_timeline_raw.jsonl 2>/dev/null || echo '')
          PHASE=$(printf '%s' "$LAST" | sed -E 's/.*"phase":"([^"]+)".*/\1/')
          MD5=$(printf '%s' "$LAST" | sed -E 's/.*"wp_config_md5":"([^"]+)".*/\1/')
          if [ -n "$MD5" ] && [ "$MD5" != "${PREV_WP_CFG_MD5:-}" ]; then
            echo "[cfg-diff][$PHASE] wp-config md5 changed prev='${PREV_WP_CFG_MD5:-none}' new='$MD5'"
            ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CFG_PATH="";
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
            if [ -n "$CFG_PATH" ]; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cp '$CFG_PATH' '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; sed -E -i \"s/(DB_(NAME|USER|PASSWORD)'?, *')[^']*'/\\1***'/Ig\" '$CFG_PATH.ci.sanitized.tmp' 2>/dev/null || true; head -n 25 '$CFG_PATH.ci.sanitized.tmp'; echo '...'; tail -n 25 '$CFG_PATH.ci.sanitized.tmp'" > diff_${PHASE}_wp-config_sanitized.txt 2>/dev/null || true
            fi
          fi
          echo "PREV_WP_CFG_MD5=$MD5" >> $GITHUB_ENV
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Assert LiteSpeed optimizer absent (hard fail if real code persists)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set -e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          PLUG_DIR="$HOSTINGER_PATH/wp-content/plugins/litespeed-cache"
          # If optimizer.cls.php exists we are still shipping real plugin code (should be excluded/renamed) -> fail fast.
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PLUG_DIR/src/optimizer.cls.php' ]"; then
            echo "[litespeed-assert][fail] Real LiteSpeed optimizer code still present at $PLUG_DIR/src/optimizer.cls.php" >&2
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1R '$PLUG_DIR' 2>/dev/null | sed 's/^/[litespeed-assert][dir] /'" || true
            exit 1
          fi
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$PLUG_DIR' ]"; then
            echo "[litespeed-assert] Directory exists (likely stub); listing for verification:" 
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$PLUG_DIR' 2>/dev/null | sed 's/^/[litespeed-assert][stub] /'" || true
          else
            echo "[litespeed-assert] No litespeed-cache directory present (expected after exclusion)"
          fi
          echo "[litespeed-assert] Passed: no optimizer.cls.php detected."
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}


      - name: Extract previous marker metrics (hashes & sizes)
        if: ${{ (success() || failure()) && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          # Allow tolerant parsing (do not fail whole job if marker JSON malformed)
          set +e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "test -s '$HOSTINGER_PATH/.deploy-info.json'" 2>/dev/null; then
            CONTENT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cat '$HOSTINGER_PATH/.deploy-info.json'" || true)
            echo "$CONTENT" | head -c 200 | sed 's/^/[prev-marker]/'
            if command -v jq >/dev/null 2>&1; then
              HPREV_HASH=$(printf '%s' "$CONTENT" | jq -r '.homepage_hash // empty' 2>/dev/null)
              JQ_RC=$?
              APREV_HASH=$(printf '%s' "$CONTENT" | jq -r '.admin_hash // empty' 2>/dev/null)
              HPREV_SIZE=$(printf '%s' "$CONTENT" | jq -r '.homepage_size // empty' 2>/dev/null)
              APREV_SIZE=$(printf '%s' "$CONTENT" | jq -r '.admin_size // empty' 2>/dev/null)
              if [ $JQ_RC -ne 0 ]; then
                echo "[prev-marker][warn] jq parse failed (rc=$JQ_RC); falling back to regex extraction"
                HPREV_HASH=$(printf '%s' "$CONTENT" | grep -o '"homepage_hash":"[a-f0-9]\{16,64\}"' | head -n1 | cut -d'"' -f4 || true)
                APREV_HASH=$(printf '%s' "$CONTENT" | grep -o '"admin_hash":"[a-f0-9]\{16,64\}"' | head -n1 | cut -d'"' -f4 || true)
                HPREV_SIZE=$(printf '%s' "$CONTENT" | grep -o '"homepage_size":[0-9]*' | head -n1 | cut -d: -f2 || true)
                APREV_SIZE=$(printf '%s' "$CONTENT" | grep -o '"admin_size":[0-9]*' | head -n1 | cut -d: -f2 || true)
              fi
            else
              HPREV_HASH=$(printf '%s' "$CONTENT" | grep -o '"homepage_hash":"[a-f0-9]\{16,64\}"' | head -n1 | cut -d'"' -f4 || true)
              APREV_HASH=$(printf '%s' "$CONTENT" | grep -o '"admin_hash":"[a-f0-9]\{16,64\}"' | head -n1 | cut -d'"' -f4 || true)
              HPREV_SIZE=$(printf '%s' "$CONTENT" | grep -o '"homepage_size":[0-9]*' | head -n1 | cut -d: -f2 || true)
              APREV_SIZE=$(printf '%s' "$CONTENT" | grep -o '"admin_size":[0-9]*' | head -n1 | cut -d: -f2 || true)
            fi
            [ -n "$HPREV_HASH" ] && echo "PREV_HOMEPAGE_HASH=$HPREV_HASH" >> $GITHUB_ENV
            [ -n "$APREV_HASH" ] && echo "PREV_ADMIN_HASH=$APREV_HASH" >> $GITHUB_ENV
            [ -n "$HPREV_SIZE" ] && echo "PREV_HOMEPAGE_SIZE=$HPREV_SIZE" >> $GITHUB_ENV
            [ -n "$APREV_SIZE" ] && echo "PREV_ADMIN_SIZE=$APREV_SIZE" >> $GITHUB_ENV
          else
            echo "[prev-marker] No existing marker (first run or missing)."
          fi
          # Re-enable errexit for any subsequent composite commands (defensive; though step ends here)
          set -e
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Optional - Run WP cache flush
        if: ${{ success() && env.RUN_WP_CLI_CACHE_FLUSH == 'true' && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cd $HOSTINGER_PATH && wp cache flush || true"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          RUN_WP_CLI_CACHE_FLUSH: ${{ secrets.RUN_WP_CLI_CACHE_FLUSH || 'false' }}


  # Removed premature marker artifact upload; marker is only created after smoke tests now.

      - name: Toggle WP_DEBUG (optional)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.toggle_debug != 'none' && github.event.inputs.toggle_debug != '' }}
        run: |
          ACTION="${TOGGLE_DEBUG}"
          MINUTES="${DEBUG_MINUTES}"
          if ! echo "$MINUTES" | grep -Eq '^[0-9]+$'; then MINUTES=15; fi
          if [ "$MINUTES" -lt 1 ]; then MINUTES=15; fi
          CONFIG_ROOT="$HOSTINGER_PATH/wp-config.php"
          CONFIG_PARENT="$(dirname "$HOSTINGER_PATH")/wp-config.php"
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f \"$CONFIG_ROOT\" ]"; then
            TARGET="$CONFIG_ROOT"
          elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f \"$CONFIG_PARENT\" ]"; then
            TARGET="$CONFIG_PARENT"
          else
            echo "[debug-toggle] wp-config.php not found in root or parent; attempting heuristic search...";
            BASE_DIR=$(dirname "$HOSTINGER_PATH")
            CAND=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "find \"$BASE_DIR\" -maxdepth 4 -type f -name wp-config.php 2>/dev/null | head -n 1" || true)
            if [ -n "$CAND" ]; then
              TARGET="$CAND"
              echo "[debug-toggle] Using discovered config: $TARGET"
            else
              echo "[debug-toggle] No wp-config.php discovered by search; skipping."; exit 0
            fi
          fi
          echo "[debug-toggle] Target config: $TARGET (action=$ACTION minutes=$MINUTES)"
          if [ "$ACTION" = "enable" ]; then
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "TARGET='$TARGET'; MINUTES='$MINUTES'; set -e; \
              TMP=\"\$TARGET.copilot.tmp\"; \
              if grep -q COPILOT_DEBUG_START \"\$TARGET\"; then \
                echo '[remote] Updating existing debug window to' \"\$MINUTES\" 'min'; \
                sed -E -i \"s/(COPILOT_DEBUG_WINDOW *= *)[0-9]+/\\1\$MINUTES/\" \"\$TARGET\"; \
              else \
                echo '[remote] Inserting temporary debug snippet ('\"\$MINUTES\"' min)'; \
                awk -v M=\"$MINUTES\" ' \
                  /require_once[[:space:]]+ABSPATH.*wp-settings.php/ { \
                    print "// COPILOT_DEBUG_START"; \
                    print "// Auto-inserted by CI for temporary debug window"; \
                    print "if (!defined(\"WP_DEBUG\")) {"; \
                    print "  \\${COPILOT_DEBUG_WINDOW} = " M "; // COPILOT_DEBUG_WINDOW"; \
                    print "  \\${__flag} = __DIR__ . \"/wp-content/.copilot_debug_start\";"; \
                    print "  if (!file_exists(\\${__flag})) { @file_put_contents(\\${__flag}, time()); }"; \
                    print "  \\${__started} = (int) @file_get_contents(\\${__flag});"; \
                    print "  if (\\${__started} + (\\${COPILOT_DEBUG_WINDOW} * 60) > time()) {"; \
                    print "    define(\"WP_DEBUG\", true);"; \
                    print "    define(\"WP_DEBUG_LOG\", true);"; \
                    print "    define(\"WP_DEBUG_DISPLAY\", false);"; \
                    print "  }"; \
                    print "}"; \
                    print "// COPILOT_DEBUG_END"; \
                  } \
                  { print }' \"\$TARGET\" > \"\$TMP\" && mv \"\$TMP\" \"\$TARGET\"; \
              fi"
          elif [ "$ACTION" = "disable" ]; then
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "TARGET='$TARGET'; set -e; \
              if grep -q COPILOT_DEBUG_START \"\$TARGET\"; then \
                echo '[remote] Removing debug snippet'; \
                sed -i '/COPILOT_DEBUG_START/,/COPILOT_DEBUG_END/d' \"\$TARGET\"; \
              else \
                echo '[remote] No debug snippet present'; \
              fi; \
              rm -f \"$HOSTINGER_PATH/wp-content/.copilot_debug_start\" 2>/dev/null || true"
          else
            echo "[debug-toggle] Unrecognized action: $ACTION"; exit 1
          fi
        env:
          TOGGLE_DEBUG: ${{ github.event.inputs.toggle_debug }}
          DEBUG_MINUTES: ${{ github.event.inputs.debug_minutes }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Post-deploy health check (optional)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' }}
        run: |
          PATH_PART="${HEALTHCHECK_PATH:-/}"
          # Ensure path part starts with /
          case "$PATH_PART" in
            /*) : ;;
            *) PATH_PART="/$PATH_PART" ;;
          esac
          URL="${PRODUCTION_URL%/}$PATH_PART"
          echo "[deploy] Health check: $URL" 
          curl -I -L --max-time 20 --retry 2 --retry-delay 3 "$URL" | sed 's/^/[health]/' || { echo '[error] Health check failed'; exit 1; }
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTHCHECK_PATH: ${{ secrets.HEALTHCHECK_PATH }}

      - name: Runtime probe & log tail (optional)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.debug_logs == 'true' }}
        run: |
          if [ -z "$PRODUCTION_URL" ]; then echo "[runtime] PRODUCTION_URL not set; skipping curl."; exit 0; fi
          URL="${PRODUCTION_URL%/}/"
          echo "[runtime] Probing homepage: $URL"
          # Capture body & headers
          curl -s -S -D headers.txt -o body.html -w '%{http_code}' "$URL" > status_code.txt || true
          SC=$(cat status_code.txt)
          echo "[runtime] HTTP status: $SC"; echo "[runtime] --- Headers ---"; sed 's/^/[hdr]/' headers.txt | head -n 40
          echo "[runtime] --- Body (first 80 lines) ---"; nl -ba body.html | sed 's/^/[body]/' | head -n 80
          # Tail candidate logs
          for cand in debug.log php-error.log error_log; do
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f \"$HOSTINGER_PATH/wp-content/$cand\" ]"; then
              echo "[runtime] Tail of wp-content/$cand"; ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 60 '$HOSTINGER_PATH/wp-content/$cand'" | sed 's/^/[log]/'
            fi
          done
          FAIL=0
          if [ "${FAIL_ON_FATAL}" = "true" ]; then
            if [ "$SC" -ge 500 ] || grep -qi 'critical error' body.html; then
              echo "[runtime] Detected fatal indicator (status $SC or body contains 'critical error')."
              FAIL=1
            fi
          fi
          if [ $FAIL -eq 1 ]; then
            echo "[runtime] Failing job due to fatal detection."; exit 1; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          FAIL_ON_FATAL: ${{ github.event.inputs.fail_on_fatal }}

      - name: Post-audit (verify after sync)
        if: ${{ success() && github.event.inputs.audit != 'true' }}
        run: |
          echo "[audit-post] Verifying critical directories after deployment"
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          REQUIRED_DIRS=(wp-admin wp-includes wp-content)
            OPTIONAL_DIRS=(core storage)
          MISS=0
          REMOTE_LIST=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A \"$HOSTINGER_PATH\"") || REMOTE_LIST=""
          for d in "${REQUIRED_DIRS[@]}"; do
            if grep -Fxq "$d" <<<"$REMOTE_LIST"; then
              echo "[audit-post] OK dir(listing): $d"
            else
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d \"$HOSTINGER_PATH/$d\" ]" 2>/dev/null; then
                echo "[audit-post] OK dir(test): $d"
              else
                echo "[audit-post] MISSING dir: $d"; MISS=$((MISS+1)); fi
            fi
          done
          for d in "${OPTIONAL_DIRS[@]}"; do
            if grep -Fxq "$d" <<<"$REMOTE_LIST"; then
              echo "[audit-post] OK optional dir(listing): $d"
            else
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d \"$HOSTINGER_PATH/$d\" ]" 2>/dev/null; then
                echo "[audit-post] OK optional dir(test): $d"
              else
                echo "[audit-post] OPTIONAL dir missing (ignored): $d"; fi
            fi
          done
          if [ "$MISS" -gt 0 ]; then
            echo "[audit-post] WARNING: $MISS required directory(ies) missing. Restore from backup before enabling delete."; fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Smoke tests (homepage + admin)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' }}
        run: |
          chmod +x scripts/smoke_check.sh || true
          scripts/smoke_check.sh "$PRODUCTION_URL"
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          SMOKE_ALLOW_FAILURE: ${{ secrets.SMOKE_ALLOW_FAILURE || 'false' }}
          SMOKE_NONBLOCKING: ${{ secrets.SMOKE_NONBLOCKING || 'false' }}
          SMOKE_MAX_HOME_MS: ${{ secrets.SMOKE_MAX_HOME_MS }}
          SMOKE_MAX_ADMIN_MS: ${{ secrets.SMOKE_MAX_ADMIN_MS }}
          SMOKE_MAX_REDIRECTS: ${{ secrets.SMOKE_MAX_REDIRECTS }}
          SMOKE_MAX_SIZE_DELTA_PCT: ${{ secrets.SMOKE_MAX_SIZE_DELTA_PCT }}
          PREV_HOMEPAGE_HASH: ${{ env.PREV_HOMEPAGE_HASH }}
          PREV_ADMIN_HASH: ${{ env.PREV_ADMIN_HASH }}
          PREV_HOMEPAGE_SIZE: ${{ env.PREV_HOMEPAGE_SIZE }}
          PREV_ADMIN_SIZE: ${{ env.PREV_ADMIN_SIZE }}

      - name: Upload smoke artifacts
        if: ${{ always() && env.PRODUCTION_URL != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: |
            smoke_artifacts
          if-no-files-found: ignore
          retention-days: 5

      - name: Record deployment marker (post-smoke)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          echo "[deploy] Writing enriched .deploy-info.json marker with commit $GITHUB_SHA (includes smoke hashes)" 
          if [ -z "$HOSTINGER_PATH" ]; then echo "[error] HOSTINGER_PATH not set"; exit 1; fi
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          COMMIT="$GITHUB_SHA"
          SHORT="${SHORT_SHA:-${GITHUB_SHA::7}}"
          STAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          DISABLED_PLUGINS_JSON=${DISABLED_PLUGINS_JSON:-[]}
          CFG_LINES_SAFE=${CFG_LINES:-0}
          CFG_RECOVERED_SAFE=${CFG_RECOVERED:-false}
          CFG_RECOVER_SRC_SAFE="${CFG_RECOVER_SRC:-}"
          LSP_VARIANTS=${LITESPEED_DISABLED_VARIANTS:-0}
          HP_HASH=${HOMEPAGE_HASH:-}
          AD_HASH=${ADMIN_HASH:-}
          HP_SIZE=${HOMEPAGE_SIZE:-0}
          AD_SIZE=${ADMIN_SIZE:-0}
          # Derive config path (root or parent) for WP_CACHE counting
          ROOT_CFG="$HOSTINGER_PATH/wp-config.php"
          PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"
          CFG_PATH=""
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          WP_CACHE_TOTAL=0; WP_CACHE_TRUE=0; WP_CACHE_FALSE=0
          if [ -n "$CFG_PATH" ]; then
            WP_CACHE_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -i 'define *[( ]*['\''\"\']WP_CACHE['\''\"\']' '$CFG_PATH' 2>/dev/null" || true)
            if [ -n "$WP_CACHE_LINES" ]; then
              WP_CACHE_TOTAL=$(printf '%s\n' "$WP_CACHE_LINES" | grep -c . || true)
              WP_CACHE_TRUE=$(printf '%s\n' "$WP_CACHE_LINES" | grep -i "true" | grep -c . || true)
              WP_CACHE_FALSE=$(printf '%s\n' "$WP_CACHE_LINES" | grep -i "false" | grep -c . || true)
            fi
          fi
          echo "[deploy][wp_cache] total=$WP_CACHE_TOTAL true=$WP_CACHE_TRUE false=$WP_CACHE_FALSE cfg_path=$CFG_PATH"
          # Retrieve active_plugins option (JSON array)
          ACTIVE_PLUGINS_JSON=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "php -r 'error_reporting(E_ERROR); $p=getenv(\"WP_ROOT\")?:\"$HOSTINGER_PATH\"; $l=$p.\"/wp-load.php\"; if(!file_exists($l)){echo \"[]\"; exit;} include $l; $ap=get_option(\"active_plugins\"); if(!is_array($ap)){$ap=[];} echo json_encode(array_values($ap));'" 2>/dev/null || echo '[]')
          case "$ACTIVE_PLUGINS_JSON" in 
            \[*\]) : ;; # looks like JSON array
            *) ACTIVE_PLUGINS_JSON='[]';;
          esac
          ACTIVE_PLUGINS_COUNT=$(printf '%s' "$ACTIVE_PLUGINS_JSON" | jq 'length' 2>/dev/null || echo 0)
          ACTIVE_PLUGINS_HASH=$(printf '%s' "$ACTIVE_PLUGINS_JSON" | sha256sum | awk '{print $1}')
          echo "[deploy][plugins] active_count=$ACTIVE_PLUGINS_COUNT hash=$ACTIVE_PLUGINS_HASH"
          if [ -n "$CFG_RECOVER_SRC_SAFE" ]; then RECOVER_SRC_JSON="\"$CFG_RECOVER_SRC_SAFE\""; else RECOVER_SRC_JSON="null"; fi
          DISABLED_COUNT=$(echo "$DISABLED_PLUGINS_JSON" | grep -o '"' | wc -l | awk '{print $1/2}')
          CM_HASH=${CODE_MANIFEST_HASH:-}
          PLUG_JSON=${PLUGIN_HASHES_JSON:-[]}
            THEME_JSON=${THEME_HASHES_JSON:-[]}
          JSON_CORE=$(printf '{"commit":"%s","short_sha":"%s","branch":"%s","deployed_at":"%s","source":"github_actions","cfg_lines":%s,"cfg_recovered":%s,"cfg_recovered_from":%s,"disabled_plugins":%s,"disabled_plugins_count":%s,"litespeed_disabled_variants":%s,"code_manifest_hash":"%s","plugin_hashes":%s,"theme_hashes":%s,"wp_cache_total_defines":%s,"wp_cache_true_defines":%s,"wp_cache_false_defines":%s,"active_plugins":%s,"active_plugins_count":%s,"active_plugins_hash":"%s"' \
            "$COMMIT" "$SHORT" "$GITHUB_REF_NAME" "$STAMP" "$CFG_LINES_SAFE" "$CFG_RECOVERED_SAFE" "$RECOVER_SRC_JSON" "$DISABLED_PLUGINS_JSON" "$DISABLED_COUNT" "$LSP_VARIANTS" "$CM_HASH" "$PLUG_JSON" "$THEME_JSON" "$WP_CACHE_TOTAL" "$WP_CACHE_TRUE" "$WP_CACHE_FALSE" "$ACTIVE_PLUGINS_JSON" "$ACTIVE_PLUGINS_COUNT" "$ACTIVE_PLUGINS_HASH")
          if [ -n "$HP_HASH" ]; then JSON_CORE+=$(printf ',"homepage_hash":"%s","homepage_size":%s' "$HP_HASH" "$HP_SIZE"); fi
          if [ -n "$AD_HASH" ]; then JSON_CORE+=$(printf ',"admin_hash":"%s","admin_size":%s' "$AD_HASH" "$AD_SIZE"); fi
          JSON="$JSON_CORE}"
          REMOTE_DIR="${HOSTINGER_PATH%/}"
          echo "[deploy] Marker JSON size: $(printf '%s' "$JSON" | wc -c) bytes"
          HASH=$(printf '%s' "$JSON" | sha256sum | awk '{print $1}')
          echo "[deploy] Marker sha256 $HASH"
          printf '%s' "$JSON" | ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mkdir -p \"$REMOTE_DIR\" && cat > \"$REMOTE_DIR/.deploy-info.json\"" \
            || { echo '[error] Failed to stream marker to remote'; exit 1; }
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "test -s \"$REMOTE_DIR/.deploy-info.json\" && head -c 300 \"$REMOTE_DIR/.deploy-info.json\"" | sed 's/^/[marker]/' || { echo '[error] Remote marker verification failed'; exit 1; }
          RETR_OK=false
          for attempt in 1 2 3; do
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cat \"$REMOTE_DIR/.deploy-info.json\" 2>/dev/null" > .deploy-info.json.local.tmp 2>/dev/null || true
            if [ -s .deploy-info.json.local.tmp ]; then
              mv .deploy-info.json.local.tmp .deploy-info.json.local
              echo "[marker] Retrieved marker locally on attempt $attempt"; RETR_OK=true; break
            else
              echo "[marker][retry] Attempt $attempt failed; sleeping"; rm -f .deploy-info.json.local.tmp 2>/dev/null || true; sleep 2
            fi
          done
          if [ "$RETR_OK" = false ]; then
            echo "[marker][warn] Fallback scp copy attempt"; scp -P "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$REMOTE_DIR/.deploy-info.json" .deploy-info.json.local 2>/dev/null || true; fi
          if [ -s .deploy-info.json.local ]; then echo "[marker] Local marker copy size: $(wc -c < .deploy-info.json.local) bytes"; else echo '[marker][warn] Local copy unavailable'; fi
          echo "MARKER_SHA256=$HASH" >> $GITHUB_ENV
          echo "[deploy] Exported MARKER_SHA256 env=$HASH"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Upload deployment marker artifact (post-creation)
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: deploy-marker
          path: .deploy-info.json.local
          include-hidden-files: true
          if-no-files-found: warn
          retention-days: 14

      - name: Post-run validation & integrity assertions
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set -e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          ROOT_CFG="$HOSTINGER_PATH/wp-config.php"
          echo "[validate][diag] Listing any wp-config.php candidates (depth 3 around path root)";
          BASE_DIR=$(dirname "$HOSTINGER_PATH")
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "find '$BASE_DIR' -maxdepth 3 -type f -name wp-config.php 2>/dev/null | sed 's/^/[validate][found] /'" || true
          echo "[validate][diag] Showing WP_CACHE lines (raw grep) BEFORE re-normalization attempt";
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -n -i WP_CACHE '$ROOT_CFG' 2>/dev/null || echo '[validate][diag] (no matches)'" || true
          # Strengthen normalization again (defense-in-depth) just before metrics
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then
            echo "[validate][normalize] Re-applying WP_CACHE dedupe at final stage";
            ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "TS=\$(date +%s); cp '$ROOT_CFG' '$ROOT_CFG.ci.prevalidate.'\"$TS\"; \
              awk 'BEGIN{IGNORECASE=1} /WP_CACHE/ {next} {print}' '$ROOT_CFG' > '$ROOT_CFG.ci.tmp' && mv '$ROOT_CFG.ci.tmp' '$ROOT_CFG'; \
              printf '%s\n' '// Managed by CI: enforce single WP_CACHE false (validation stage)' 'if (!defined(\"WP_CACHE\")) { define(\"WP_CACHE\", false); }' >> '$ROOT_CFG'; \
              grep -n -i WP_CACHE '$ROOT_CFG' || true" || echo "[validate][normalize][warn] Remote normalization step failed"
          else
            echo "[validate][normalize][warn] Root config missing before re-normalization"
          fi
          # Collect final config metrics
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then
            FINAL_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$ROOT_CFG' 2>/dev/null" || echo 0)
            FINAL_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$ROOT_CFG' 2>/dev/null | awk '{print $1}'" || echo unknown)
            echo "[validate] wp-config.php final lines=$FINAL_LINES md5=$FINAL_MD5"
          else
            echo "[validate][fatal] wp-config.php no longer present after deploy"; exit 1
          fi
          # Assert WP_CACHE uniqueness and forced false
          WP_CACHE_COUNT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -i 'WP_CACHE' '$ROOT_CFG' 2>/dev/null | grep -c 'define' || true")
          echo "[validate] WP_CACHE define count: $WP_CACHE_COUNT"
          if [ "$WP_CACHE_COUNT" -eq 0 ]; then
            echo "[validate][fatal] No WP_CACHE define present after enforced normalization"; exit 1
          fi
          # Count how many force false vs any forcing true
          WP_CACHE_FALSE_COUNT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -i 'WP_CACHE' '$ROOT_CFG' 2>/dev/null | grep -i 'define' | grep -i 'false' | wc -l | awk '{print $1}' || echo 0")
          WP_CACHE_TRUE_COUNT=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "grep -i 'WP_CACHE' '$ROOT_CFG' 2>/dev/null | grep -i 'define' | grep -i 'true' | wc -l | awk '{print $1}' || echo 0")
          echo "[validate] WP_CACHE false=$WP_CACHE_FALSE_COUNT true=$WP_CACHE_TRUE_COUNT"
          if [ "$WP_CACHE_TRUE_COUNT" -gt 0 ]; then
            echo "[validate][fatal] Found a WP_CACHE define forcing true (should all be false)"; exit 1
          fi
          if [ "$WP_CACHE_COUNT" -gt 1 ]; then
            echo "[validate][warn] Multiple WP_CACHE defines collapsed logically (will tolerate since all force false)";
          fi
          if [ "$WP_CACHE_FALSE_COUNT" -ge 1 ]; then
            echo "[validate] WP_CACHE enforcement effective (at least one false)";
          else
            echo "[validate][fatal] No WP_CACHE define forcing false"; exit 1
          fi
          # Compare line delta vs guard snapshot (CFG_LINES env from earlier guard step)
          ORIG_LINES=${CFG_LINES:-0}
          if [ "$ORIG_LINES" -gt 0 ]; then
            DELTA=$((ORIG_LINES - FINAL_LINES))
            ABS_DELTA=${DELTA#-}
            echo "[validate] Config line delta original=$ORIG_LINES final=$FINAL_LINES (abs=$ABS_DELTA)"
            if [ "$FINAL_LINES" -lt 30 ]; then echo "[validate][fatal] Final config unexpectedly small (<30 lines)"; exit 1; fi
            if [ "$ABS_DELTA" -gt 30 ]; then echo "[validate][warn] Large line count delta ($ABS_DELTA) between guard and final; review changes"; fi
          else
            echo "[validate][info] No original CFG_LINES baseline available (guard may have skipped)."
          fi
          # Fetch marker JSON and perform minimal structural checks
          MARKER_LOCAL=.deploy-info.json.final
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cat '$HOSTINGER_PATH/.deploy-info.json' 2>/dev/null" > "$MARKER_LOCAL" || { echo "[validate][fatal] Unable to read remote marker"; exit 1; }
          head -c 400 "$MARKER_LOCAL" | sed 's/^/[validate][marker]/'
          for key in commit deployed_at cfg_lines disabled_plugins litespeed_disabled_variants code_manifest_hash plugin_hashes theme_hashes; do
            if ! grep -q "$key" "$MARKER_LOCAL"; then echo "[validate][fatal] Marker missing key: $key"; exit 1; fi
          done
          # Basic JSON validity (counts braces & quotes balance heuristic)
          if [ $(grep -o '{' "$MARKER_LOCAL" | wc -l) -lt 1 ] || [ $(grep -o '}' "$MARKER_LOCAL" | wc -l) -lt 1 ]; then
            echo "[validate][fatal] Marker appears malformed"; exit 1; fi
          # Re-hash marker and compare with earlier recorded hash (if available)
          CURRENT_HASH=$(sha256sum "$MARKER_LOCAL" | awk '{print $1}')
          if [ -n "$MARKER_SHA256" ]; then
            if [ "$CURRENT_HASH" != "$MARKER_SHA256" ]; then
              echo "[validate][fatal] Marker hash mismatch (expected $MARKER_SHA256 got $CURRENT_HASH)"; exit 1
            else
              echo "[validate] Marker hash matches recorded value ($CURRENT_HASH)"
            fi
          else
            echo "[validate][info] No prior MARKER_SHA256 baseline available for comparison"
          fi
          echo "[validate] Marker structure OK"
          if command -v jq >/dev/null 2>&1; then
            if ! jq -e '.commit and .short_sha and .branch and .deployed_at and .cfg_lines and (.disabled_plugins|type=="array") and .disabled_plugins_count and .litespeed_disabled_variants' "$MARKER_LOCAL" >/dev/null; then
              echo "[validate][fatal] Marker JSON schema validation failed (jq)"; exit 1; fi
          else
            echo "[validate][info] jq not installed; skipping marker schema validation"
          fi
          # Build validation JSON summary
          printf '{"original_lines":%s,"final_lines":%s,"wp_cache_defines":%s,"final_md5":"%s","marker_size":%s,"marker_hash":"%s","timestamp":"%s"}\n' \
            "$ORIG_LINES" "$FINAL_LINES" "$WP_CACHE_COUNT" "$FINAL_MD5" "$(wc -c < "$MARKER_LOCAL" 2>/dev/null || echo 0)" "$CURRENT_HASH" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > validation-summary.json
          echo "[validate] Wrote validation-summary.json ($(wc -c < validation-summary.json) bytes)"
          if command -v jq >/dev/null 2>&1; then
            if ! jq -e '.original_lines and .final_lines and .wp_cache_defines and .final_md5 and .marker_size and .marker_hash and .timestamp' validation-summary.json >/dev/null; then
              echo "[validate][fatal] validation-summary.json schema invalid (jq)"; exit 1; fi
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          MARKER_SHA256: ${{ env.MARKER_SHA256 }}

      - name: Health checkpoint (post_validation)
        if: ${{ always() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set +e
          PHASE="post_validation"; STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          URL="${PRODUCTION_URL%/}/"; curl -s -S -D hc_${PHASE}_headers.txt -o hc_${PHASE}_body.html -w '%{http_code}' "$URL" > hc_${PHASE}_code.txt || true
          CODE=$(cat hc_${PHASE}_code.txt 2>/dev/null || echo 0)
          echo "[health][$PHASE] code=$CODE"
          CFG_PATH=""; ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php";
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CFG_PATH="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CFG_PATH="$PARENT_CFG"; fi
          CFG_LINES=0; CFG_MD5=""; if [ -n "$CFG_PATH" ]; then CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CFG_PATH' 2>/dev/null" || echo 0); CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CFG_PATH' 2>/dev/null | awk '{print $1}'" || echo unknown); fi
          echo "{\"phase\":\"$PHASE\",\"code\":$CODE,\"ts\":\"$STAMP\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$CODE" -ne 200 ]; then for lf in debug.log php-error.log error_log; do if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$lf' ]"; then ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$lf'" > "hc_${PHASE}_$lf" 2>/dev/null || true; fi; done; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Auto-restore healthy wp-config if regression
        if: ${{ always() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set +e
          FINAL_CODE=$(cat hc_post_validation_code.txt 2>/dev/null || echo 0)
          echo "[restore-check] final_code=$FINAL_CODE good_snapshot='${GOOD_WP_CONFIG_REMOTE:-}' first_healthy_md5='${FIRST_HEALTHY_MD5:-}'"
          if [ "$FINAL_CODE" -eq 200 ] || [ -z "${GOOD_WP_CONFIG_REMOTE:-}" ]; then
            echo "[restore-check] No restore needed."; exit 0
          fi
          ROOT_CFG="$HOSTINGER_PATH/wp-config.php"; PARENT_CFG="$(dirname "$HOSTINGER_PATH")/wp-config.php"; CURR_CFG="";
          if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$ROOT_CFG' ]"; then CURR_CFG="$ROOT_CFG"; elif ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$PARENT_CFG' ]"; then CURR_CFG="$PARENT_CFG"; fi
          if [ -z "$CURR_CFG" ]; then echo "[restore][fatal] Current wp-config not found"; exit 0; fi
          STAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "[restore] Attempting restore from $GOOD_WP_CONFIG_REMOTE"
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "if [ -f '$GOOD_WP_CONFIG_REMOTE' ]; then cp '$CURR_CFG' '$CURR_CFG.ci.bad.$STAMP' 2>/dev/null || true; cp '$GOOD_WP_CONFIG_REMOTE' '$CURR_CFG' 2>/dev/null || true; fi" || true
          sleep 6
          curl -s -S -o /dev/null -w '%{http_code}' "${PRODUCTION_URL%/}/" > hc_auto_restore_code.txt || true
          NEW_CODE=$(cat hc_auto_restore_code.txt 2>/dev/null || echo 0)
          CFG_LINES=0; CFG_MD5=""; CFG_LINES=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "wc -l < '$CURR_CFG' 2>/dev/null" || echo 0); CFG_MD5=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "md5sum '$CURR_CFG' 2>/dev/null | awk '{print $1}'" || echo unknown)
          STAMP2=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "{\"phase\":\"auto_restore_after_validation\",\"code\":$NEW_CODE,\"ts\":\"$STAMP2\",\"wp_config_lines\":$CFG_LINES,\"wp_config_md5\":\"$CFG_MD5\"}" >> health_timeline_raw.jsonl
          if [ "$NEW_CODE" -eq 200 ]; then echo "RESTORE_SUCCESS=1" >> $GITHUB_ENV; echo "[restore] Successful recovery to 200"; else echo "RESTORE_FAILED=1" >> $GITHUB_ENV; echo "[restore][warn] Restore did not recover site (code=$NEW_CODE)"; fi
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Fail on unresolved regression
        if: ${{ always() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          FINAL_CODE=$(cat hc_post_validation_code.txt 2>/dev/null || echo 0)
          if [ "$FINAL_CODE" -ne 200 ] && [ -n "${GOOD_WP_CONFIG_REMOTE:-}" ] && [ -z "${RESTORE_SUCCESS:-}" ]; then
            echo "[regression][fatal] Site unhealthy after validation (code=$FINAL_CODE) and restore unsuccessful"; exit 1
          fi
          echo "[regression] No failing regression condition triggered."
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Compile health timeline
        if: ${{ always() && github.event.inputs.audit != 'true' }}
        run: |
          if [ -f health_timeline_raw.jsonl ]; then
            echo '[' > health_timeline.json
            LC=0
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              if [ $LC -gt 0 ]; then echo ',' >> health_timeline.json; fi
              printf '%s' "$line" >> health_timeline.json
              LC=$((LC+1))
            done < health_timeline_raw.jsonl
            echo ']' >> health_timeline.json
            echo "[health][timeline] Compiled health_timeline.json with $LC entries"
            head -n 5 health_timeline_raw.jsonl | sed 's/^/[health][timeline][sample] /'
          else
            echo "[health][timeline] No raw timeline file present"
          fi

      - name: Upload health timeline artifacts
        if: ${{ always() && github.event.inputs.audit != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: health-timeline
          path: |
            health_timeline_raw.jsonl
            health_timeline.json
            hc_*_headers.txt
            hc_*_body.html
            hc_*_code.txt
            hc_*_debug.log
            hc_*_php-error.log
            hc_*_error_log
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload validation summary
        if: ${{ success() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: post-run-validation
          path: validation-summary.json
          if-no-files-found: error
          retention-days: 7

      - name: Always capture recent logs if non-200 or diagnostics requested
        if: ${{ always() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        run: |
          set +e
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//'); HOSTINGER_PATH="$CLEAN_PATH"
          STATUS_OK=1
          for code in "$HOMEPAGE_STATUS" "$ADMIN_STATUS"; do
            [ -z "$code" ] && continue
            if [ "$code" != "200" ]; then STATUS_OK=0; fi
          done
          if [ "$STATUS_OK" -eq 1 ] && [ "${{ github.event.inputs.debug_logs }}" != "true" ]; then
            echo "[logs] All primary endpoints 200 and debug_logs not requested; skipping log capture"; exit 0; fi
            echo "[logs] Capturing logs (status_ok=$STATUS_OK debug_input=${{ github.event.inputs.debug_logs }})"
          for logf in debug.log php-error.log error_log; do
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$logf' ]"; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 250 '$HOSTINGER_PATH/wp-content/$logf'" > logs_$logf 2>/dev/null || true
              echo "[logs] Saved logs_$logf";
            fi
          done
          if [ -f logs_debug.log ] || [ -f logs_php-error.log ] || [ -f logs_error_log ]; then
            ls -l logs_* | sed 's/^/[logs][files]/'
          else
            echo "[logs] No log files captured"
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          HOMEPAGE_STATUS: ${{ env.HOMEPAGE_STATUS }}
          ADMIN_STATUS: ${{ env.ADMIN_STATUS }}

      - name: Upload captured logs
        if: ${{ always() && github.event.inputs.audit != 'true' && github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: runtime-logs
          path: logs_*
          if-no-files-found: ignore
          retention-days: 7

      - name: On-failure diagnostics (tail logs & deep probe)
        if: ${{ failure() }}
        run: |
          echo "[diag] Job has failures; collecting diagnostics." >&2
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          MU_DIR="$HOSTINGER_PATH/wp-content/mu-plugins"
          TEMP_MU="$MU_DIR/zzz-ci-temp-debug.php"
          echo "[diag] Ensuring mu-plugins directory for temporary debug snippet" >&2
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mkdir -p '$MU_DIR'" || true
          echo "[diag] Injecting temporary mu-plugin to force WP_DEBUG & WP_DEBUG_LOG (if possible)" >&2
          echo "[diag] Building temporary mu-plugin file locally" >&2
          {
            printf '%s\n' '<?php'
            printf '%s\n' '/**'
            printf '%s\n' ' * Temporary CI debug mu-plugin (auto-created on failure, removed after diagnostics).'
            printf '%s\n' ' */'
            printf '%s\n' "if (!defined('WP_DEBUG')) { define('WP_DEBUG', true); }"
            printf '%s\n' "if (!defined('WP_DEBUG_LOG')) { define('WP_DEBUG_LOG', true); }"
            printf '%s\n' "if (!defined('WP_DEBUG_DISPLAY')) { define('WP_DEBUG_DISPLAY', false); }"
            printf '%s\n' "if (!function_exists('__ci_temp_debug_marker')) {"
            printf '%s\n' '  function __ci_temp_debug_marker() { return true; }'
            printf '%s\n' "  error_log('[ci-temp-debug] mu-plugin loaded at ' . date('c'));"
            printf '%s\n' '}'
          } > ci-temp-mu.php
          scp -P "$HOSTINGER_SSH_PORT" ci-temp-mu.php "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$TEMP_MU" 2>/dev/null || echo "[diag][warn] Failed to copy mu-plugin" >&2
          rm -f ci-temp-mu.php || true
          # Small delay to allow PHP opcode cache (if any) to notice new file
          sleep 2
          echo "[diag] Probing endpoints" >&2
          for ep in "/" "/wp-admin/" "/wp-json/" "/?rest_route=/"; do
            URL="${PRODUCTION_URL%/}$ep"
            echo "[diag] Curling $URL" >&2
            curl -s -S -D diag_headers$(echo "$ep" | tr '/?' '_').txt -o diag_body$(echo "$ep" | tr '/?' '_').html -w '\n[diag] http_code=%{http_code} time_total=%{time_total}s size=%{size_download}B redirects=%{num_redirects}\n' "$URL" || echo "[diag][warn] curl failed for $ep" >&2
            head -n 80 diag_body$(echo "$ep" | tr '/?' '_').html | sed "s/^/[diag][body$(echo "$ep" | tr '/?' '_')]/" || true
          done
          echo "[diag] Tailing logs" >&2
          for logf in debug.log php-error.log error_log; do
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$logf' ]"; then
              echo "[diag] Tail of $logf" >&2
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 120 '$HOSTINGER_PATH/wp-content/$logf'" | sed "s/^/[diag][log:$logf]/"
            fi
          done
          echo "[diag] Grepping fatal patterns" >&2
          for logf in debug.log php-error.log error_log; do
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$logf' ]"; then
              ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 300 '$HOSTINGER_PATH/wp-content/$logf'" | grep -Ei 'fatal|error' | head -n 60 | sed "s/^/[diag][grep:$logf]/" || true
            fi
          done
          echo "[diag] Removing temporary mu-plugin" >&2
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "rm -f '$TEMP_MU'" || true
          echo "[diag] Done diagnostics." >&2
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Final status summary
        if: ${{ always() }}
        run: |
          echo "::group::Final Deployment Summary"
          echo "summary.commit=$GITHUB_SHA"
          if [ -n "${{ env.MARKER_SHA256 }}" ]; then echo "summary.marker_sha256=${{ env.MARKER_SHA256 }}"; fi
          if [ -n "${{ env.DRIFT_STATUS }}" ]; then echo "summary.drift=${{ env.DRIFT_STATUS }}"; fi
          if [ -n "${{ env.JQ_VERSION }}" ]; then echo "summary.jq=${{ env.JQ_VERSION }}"; fi
          if [ -n "${{ env.HOMEPAGE_STATUS }}" ]; then echo "summary.home.status=${{ env.HOMEPAGE_STATUS }}"; fi
          if [ -n "${{ env.HOMEPAGE_TIME_MS }}" ]; then echo "summary.home.time_ms=${{ env.HOMEPAGE_TIME_MS }}"; fi
          if [ -n "${{ env.HOMEPAGE_REDIRECTS }}" ]; then echo "summary.home.redirects=${{ env.HOMEPAGE_REDIRECTS }}"; fi
          if [ -n "${{ env.ADMIN_STATUS }}" ]; then echo "summary.admin.status=${{ env.ADMIN_STATUS }}"; fi
          if [ -n "${{ env.ADMIN_TIME_MS }}" ]; then echo "summary.admin.time_ms=${{ env.ADMIN_TIME_MS }}"; fi
          if [ -n "${{ env.ADMIN_REDIRECTS }}" ]; then echo "summary.admin.redirects=${{ env.ADMIN_REDIRECTS }}"; fi
          if [ -n "${{ env.HOMEPAGE_THRESHOLD_FAIL }}" ]; then echo "summary.home.threshold_fail=${{ env.HOMEPAGE_THRESHOLD_FAIL }}"; fi
          if [ -n "${{ env.ADMIN_THRESHOLD_FAIL }}" ]; then echo "summary.admin.threshold_fail=${{ env.ADMIN_THRESHOLD_FAIL }}"; fi
          if [ -n "${{ env.HOMEPAGE_HASH }}" ]; then echo "summary.home.hash_prefix=${{ env.HOMEPAGE_HASH }}" | cut -c1-16; fi
          if [ -n "${{ env.ADMIN_HASH }}" ]; then echo "summary.admin.hash_prefix=${{ env.ADMIN_HASH }}" | cut -c1-16; fi
          if [ -n "${{ env.HOMEPAGE_SIZE }}" ]; then echo "summary.home.size=${{ env.HOMEPAGE_SIZE }}"; fi
          if [ -n "${{ env.ADMIN_SIZE }}" ]; then echo "summary.admin.size=${{ env.ADMIN_SIZE }}"; fi
          if [ -n "${{ env.HOMEPAGE_SIZE_DELTA_PCT }}" ]; then echo "summary.home.size_delta_pct=${{ env.HOMEPAGE_SIZE_DELTA_PCT }}"; fi
          if [ -n "${{ env.ADMIN_SIZE_DELTA_PCT }}" ]; then echo "summary.admin.size_delta_pct=${{ env.ADMIN_SIZE_DELTA_PCT }}"; fi
          if [ -n "${{ env.HOMEPAGE_REASON }}" ]; then echo "summary.home.reason=${{ env.HOMEPAGE_REASON }}"; fi
          if [ -n "${{ env.ADMIN_REASON }}" ]; then echo "summary.admin.reason=${{ env.ADMIN_REASON }}"; fi
          if [ -n "${{ env.SMOKE_OVERALL_STATUS }}" ]; then echo "summary.smoke.overall=${{ env.SMOKE_OVERALL_STATUS }}"; fi
          if [ -f validation-summary.json ]; then
            if command -v jq >/dev/null 2>&1; then
              jq -r '"summary.config_lines=" + (.original_lines|tostring) + "/" + (.final_lines|tostring) + " summary.marker_size=" + (.marker_size|tostring) + " summary.marker_hash_prefix=" + (.marker_hash[0:16])' validation-summary.json || true
            else
              ORIG=$(grep -o '"original_lines":[0-9]*' validation-summary.json | cut -d: -f2 | head -1); \
              FIN=$(grep -o '"final_lines":[0-9]*' validation-summary.json | cut -d: -f2 | head -1); \
              SIZE=$(grep -o '"marker_size":[0-9]*' validation-summary.json | cut -d: -f2 | head -1); \
              HASH=$(grep -o '"marker_hash":"[a-f0-9]*"' validation-summary.json | cut -d: -f2 | tr -d '"' | cut -c1-16); \
              echo "summary.config_lines=$ORIG/$FIN summary.marker_size=$SIZE summary.marker_hash_prefix=$HASH";
            fi
          else
            echo "summary.validation=absent"
          fi
          if [ "${{ job.status }}" = 'success' ]; then echo "summary.status=success"; else echo "summary.status=${{ job.status }}"; fi
          echo "::endgroup::"
