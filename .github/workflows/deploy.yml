name: Deploy to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual deployment"
        required: false
        default: ""
      audit:
        description: "Set to true to run remote audit only (no rsync)"
        required: false
        default: "false"

jobs:
  deploy:
    name: Sync files to Hostinger
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show manual trigger reason
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.reason != '' }}
        run: |
          echo "Manual deployment reason: ${{ github.event.inputs.reason }}"

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Add Host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_HOST" >> ~/.ssh/known_hosts
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}

      - name: Pre-audit (inventory critical paths)
        id: pre_audit
        run: |
          echo "[audit-pre] Starting pre-audit (event=${GITHUB_EVENT_NAME} audit_input=${AUDIT_INPUT:-n/a})"
          if [ -z "$HOSTINGER_PATH" ]; then echo "[audit-pre] HOSTINGER_PATH secret missing"; exit 1; fi
          # Sanitize HOSTINGER_PATH (remove trailing CR/LF/whitespace) to avoid newline in path causing false negatives
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          if [ "$CLEAN_PATH" != "$HOSTINGER_PATH" ]; then
            echo "[audit-pre] Trimmed HOSTINGER_PATH -> '$CLEAN_PATH' (raw had trailing whitespace)"
          fi
          HOSTINGER_PATH="$CLEAN_PATH"
          EXPECT_DIRS=(core storage wp-admin wp-includes wp-content)
          EXPECT_FILES=(index.php wp-load.php)
          ssh -o BatchMode=yes -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" 'echo [remote] reachable' || { echo "[audit-pre] SSH failed"; exit 1; }
          echo "[audit-pre] Top-level contents:"; ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A $HOSTINGER_PATH" | sed 's/^/[ls]/'
          MISS=0
          REMOTE_LIST=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$HOSTINGER_PATH'") || REMOTE_LIST=""
          printf '%s' "$REMOTE_LIST" > remote_listing.txt
          echo "[audit-pre][debug] Remote path bytes:"; printf '%s' "$HOSTINGER_PATH" | od -An -tx1 | sed 's/^/[hex]/'
          for d in "${EXPECT_DIRS[@]}"; do
            if grep -Fxq "$d" <<<"$REMOTE_LIST"; then
              echo "[audit-pre] OK dir(listing): $d"
            else
              # Fallback test directly
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$HOSTINGER_PATH/$d' ]" 2>/dev/null; then
                echo "[audit-pre] OK dir(test): $d"
              else
                echo "[audit-pre] MISSING dir: $d"; MISS=$((MISS+1));
                ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -ld '$HOSTINGER_PATH' || true" | sed 's/^/[audit-pre][parent]/'
              fi
            fi
          done
          for f in "${EXPECT_FILES[@]}"; do
            if grep -Fxq "$f" <<<"$REMOTE_LIST"; then
              echo "[audit-pre] OK file(listing): $f"
            else
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/$f' ]" 2>/dev/null; then
                echo "[audit-pre] OK file(test): $f"
              else
                echo "[audit-pre] MISSING file: $f"; MISS=$((MISS+1));
              fi
            fi
          done
          # Try to tail a recent PHP error log if present
          for cand in php-error.log debug.log error_log; do
            if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -f '$HOSTINGER_PATH/wp-content/$cand' ]"; then
              echo "[audit-pre] Tail of wp-content/$cand:"; ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "tail -n 40 '$HOSTINGER_PATH/wp-content/$cand'" | sed 's/^/[log]/'; break; fi
          done
          echo "[audit-pre] Missing count: $MISS"
          echo "missing_count=$MISS" >> $GITHUB_OUTPUT
          if [ "$MISS" -gt 0 ]; then
            echo "[audit-pre] WARNING: $MISS required path(s) missing.";
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          AUDIT_INPUT: ${{ github.event.inputs.audit }}

      - name: Stop after audit (audit-only)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.audit == 'true' }}
        run: |
          echo "[audit] Audit-only run requested; skipping rsync and marker steps.";
          exit 0

      - name: Rsync to server
        if: ${{ github.event.inputs.audit != 'true' }}
        run: |
          # Base rsync excludes
          # Sanitize HOSTINGER_PATH (remove trailing CR/LF/whitespace) for consistency
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          if [ "$CLEAN_PATH" != "$HOSTINGER_PATH" ]; then
            echo "[deploy] Trimmed HOSTINGER_PATH -> '$CLEAN_PATH'"
          fi
          HOSTINGER_PATH="$CLEAN_PATH"
          RSYNC_EXCLUDES=(
            ".git" ".github" ".devcontainer" "node_modules" "vendor" "*.log" "*.sql" "wp-config-local.php" "wp-content/cache" "wp-content/uploads" "wp-content/upgrade"
            "wp-content/mu-plugins.disabled" "wp-content/plugins.disabled" "wp-content/plugins.off" "wp-content/themes.off"
            "aktonz-local-copy" # local backup snapshot, never deploy
          )

          # Exclude remote-only or dynamically generated directories that are not tracked in the repo but required in production.
          # These paths existed on production (e.g. asset/CSS generation or custom platform code) and were likely removed by --delete, causing homepage fatal errors.
          RSYNC_EXCLUDES+=("core" "storage")
          
          # Guard: detect ONLY top-level accidental self-nested duplicate directories (./name/name) to exclude
          # This avoids excluding legitimate vendor paths like twig/twig inside plugins.
          SELF_NESTED=$(find . -maxdepth 2 -mindepth 2 -type d -regextype posix-extended -regex './([^/]+)/\1$' | sed 's#^./##' | grep -v '^.git' || true)
          if [ -n "$SELF_NESTED" ]; then
            echo "[guard] Detected top-level self-nested duplicate directories; excluding from deployment:" 
            echo "$SELF_NESTED" | sed 's/^/  - /'
            while IFS= read -r d; do
              RSYNC_EXCLUDES+=("$d")
            done <<< "$SELF_NESTED"
          fi

          # Extra safety: never deploy nested aktonz-local-copy copies
          RSYNC_EXCLUDES+=("aktonz-local-copy/aktonz-local-copy")
          EXCLUDE_ARGS=""; for e in "${RSYNC_EXCLUDES[@]}"; do EXCLUDE_ARGS+=" --exclude=$e"; done
          echo "[deploy] Connectivity test (nc)..." || true
          command -v nc >/dev/null && nc -vz -w5 "$HOSTINGER_SSH_HOST" "$HOSTINGER_SSH_PORT" || echo "[warn] nc not available or port check failed (may still work)"
          echo "[deploy] Connectivity test (ssh banner)..." || true
          ssh -o BatchMode=yes -o ConnectTimeout=10 -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" 'echo [remote] ssh ok' || { echo "[error] SSH connection failed. Verify HOSTINGER_* secrets, firewall, and that the key is installed."; exit 1; }
          echo "[deploy] Starting rsync..." 
          # Make --delete optional to avoid wiping remote-only directories (like core/, storage/) by default.
          # Enable deletion only if DELETE_REMOTE is explicitly set to 'true'.
          DELETE_FLAG=""
          if [ "${DELETE_REMOTE:-false}" = "true" ]; then
            DELETE_FLAG="--delete"
            echo "[deploy] Remote deletion enabled (--delete)."
          else
            echo "[deploy] Remote deletion disabled (safer sync). Set secret DELETE_REMOTE=true to enable."
          fi
          rsync -az -e "ssh -p $HOSTINGER_SSH_PORT" $DELETE_FLAG $EXCLUDE_ARGS ./ "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST:$HOSTINGER_PATH" || { echo "[error] rsync failed"; exit 1; }
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          DELETE_REMOTE: ${{ secrets.DELETE_REMOTE }}

      - name: Optional - Run WP cache flush
        if: ${{ success() && env.RUN_WP_CLI_CACHE_FLUSH == 'true' && github.event.inputs.audit != 'true' }}
        run: |
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cd $HOSTINGER_PATH && wp cache flush || true"
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          RUN_WP_CLI_CACHE_FLUSH: ${{ secrets.RUN_WP_CLI_CACHE_FLUSH || 'false' }}

      - name: Record deployment marker
        if: ${{ success() && github.event.inputs.audit != 'true' }}
        run: |
          echo "[deploy] Writing .deploy-info.json marker with commit $GITHUB_SHA" 
          if [ -z "$HOSTINGER_PATH" ]; then
            echo "[error] HOSTINGER_PATH not set"; exit 1;
          fi
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          COMMIT="$GITHUB_SHA"
            STAMP="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          JSON=$(printf '{"commit":"%s","deployed_at":"%s","source":"github_actions"}' "$COMMIT" "$STAMP")
          REMOTE_DIR="${HOSTINGER_PATH%/}"
          echo "[deploy] Remote dir (length $(printf '%s' "$REMOTE_DIR" | wc -c))"
          printf '%s' "$JSON" | sha256sum | awk '{print "[deploy] Marker sha256 " $1}'
          # Create directory then stream JSON via stdin to avoid quoting issues
          printf '%s' "$JSON" | ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "mkdir -p \"$REMOTE_DIR\" && cat > \"$REMOTE_DIR/.deploy-info.json\"" \
            || { echo '[error] Failed to stream marker to remote'; exit 1; }
          # Verify marker on remote
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "test -s \"$REMOTE_DIR/.deploy-info.json\" && head -c 200 \"$REMOTE_DIR/.deploy-info.json\"" | sed 's/^/[marker]/' || { echo '[error] Remote marker verification failed'; exit 1; }
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}

      - name: Post-deploy health check (optional)
        if: ${{ success() && env.PRODUCTION_URL != '' && github.event.inputs.audit != 'true' }}
        run: |
          PATH_PART="${HEALTHCHECK_PATH:-/}"
          # Ensure path part starts with /
          case "$PATH_PART" in
            /*) : ;;
            *) PATH_PART="/$PATH_PART" ;;
          esac
          URL="${PRODUCTION_URL%/}$PATH_PART"
          echo "[deploy] Health check: $URL" 
          curl -I -L --max-time 20 --retry 2 --retry-delay 3 "$URL" | sed 's/^/[health]/' || { echo '[error] Health check failed'; exit 1; }
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTHCHECK_PATH: ${{ secrets.HEALTHCHECK_PATH }}

      - name: Post-audit (verify after sync)
        if: ${{ success() && github.event.inputs.audit != 'true' }}
        run: |
          echo "[audit-post] Verifying critical directories after deployment"
          CLEAN_PATH=$(printf '%s' "$HOSTINGER_PATH" | tr -d '\r' | sed -e 's/[[:space:]]*$//')
          HOSTINGER_PATH="$CLEAN_PATH"
          EXPECT_DIRS=(core storage wp-admin wp-includes wp-content)
          MISS=0
          REMOTE_LIST=$(ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "ls -1A '$HOSTINGER_PATH'") || REMOTE_LIST=""
          for d in "${EXPECT_DIRS[@]}"; do
            if grep -Fxq "$d" <<<"$REMOTE_LIST"; then
              echo "[audit-post] OK dir(listing): $d"
            else
              if ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "[ -d '$HOSTINGER_PATH/$d' ]" 2>/dev/null; then
                echo "[audit-post] OK dir(test): $d"
              else
                echo "[audit-post] MISSING dir: $d"; MISS=$((MISS+1)); fi
            fi
          done
          if [ "$MISS" -gt 0 ]; then
            echo "[audit-post] WARNING: $MISS directory(ies) still missing. Restore from backup before enabling delete."; fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
