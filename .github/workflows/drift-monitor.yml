name: Drift Monitor

on:
  schedule:
    - cron: '15 */6 * * *'  # Every 6 hours
  workflow_dispatch:
    inputs:
      mode:
        description: 'drift|report (drift=create issue, report=log only)'
        required: false
        default: 'drift'

jobs:
  drift:
    runs-on: ubuntu-latest
    env:
      MODE: ${{ github.event.inputs.mode || 'drift' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets (SSH)
        id: secrets_check
        run: |
          MISS=()
          for s in HOSTINGER_SSH_HOST HOSTINGER_SSH_USER HOSTINGER_SSH_PORT HOSTINGER_PATH HOSTINGER_SSH_KEY; do
            [ -z "${!s:-}" ] && MISS+=("$s")
          done
          if [ ${#MISS[@]} -gt 0 ]; then
            echo "missing=${MISS[*]}" >> $GITHUB_OUTPUT
            echo "[drift][warn] Missing secrets: ${MISS[*]} (remote comparison skipped)";
          else
            echo "missing=" >> $GITHUB_OUTPUT
          fi
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
          HOSTINGER_SSH_KEY: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Setup SSH
        if: ${{ steps.secrets_check.outputs.missing == '' }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Build local code manifest
        id: local_manifest
        run: |
          chmod +x scripts/build_code_manifest.sh || true
          OUT=$(bash scripts/build_code_manifest.sh)
          echo "$OUT" | sed 's/^/[local]/'
          while IFS= read -r line; do
            case "$line" in
              CODE_MANIFEST_HASH=*) echo "$line" >> $GITHUB_ENV; echo "local_hash=${line#*=}" >> $GITHUB_OUTPUT ;;
            esac
          done <<< "$OUT"

      - name: Fetch remote marker
        if: ${{ steps.secrets_check.outputs.missing == '' }}
        id: remote_marker
        env:
          HOSTINGER_SSH_HOST: ${{ secrets.HOSTINGER_SSH_HOST }}
          HOSTINGER_SSH_USER: ${{ secrets.HOSTINGER_SSH_USER }}
          HOSTINGER_SSH_PORT: ${{ secrets.HOSTINGER_SSH_PORT }}
          HOSTINGER_PATH: ${{ secrets.HOSTINGER_PATH }}
        run: |
          set +e
          ssh -o BatchMode=yes -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "test -s '$HOSTINGER_PATH/.deploy-info.json'" || { echo '[remote] No marker present'; exit 0; }
          ssh -p "$HOSTINGER_SSH_PORT" "$HOSTINGER_SSH_USER@$HOSTINGER_SSH_HOST" "cat '$HOSTINGER_PATH/.deploy-info.json'" > remote-marker.json 2>/dev/null || true
          if [ ! -s remote-marker.json ]; then
            echo '[remote] Marker empty/unreadable'; exit 0; fi
          head -c 160 remote-marker.json | sed 's/^/[remote][head]/'
          if command -v jq >/dev/null 2>&1; then
            R_HASH=$(jq -r '.code_manifest_hash // empty' remote-marker.json 2>/dev/null)
          else
            R_HASH=$(grep -o '"code_manifest_hash":"[a-f0-9]\{16,64\}"' remote-marker.json | head -n1 | cut -d'"' -f4)
          fi
          echo "remote_hash=$R_HASH" >> $GITHUB_OUTPUT
          if [ -z "$R_HASH" ]; then echo '[remote][warn] code_manifest_hash missing in marker'; fi

      - name: Compare local vs remote
        id: compare
        run: |
          LOCAL="${{ steps.local_manifest.outputs.local_hash }}"
          REMOTE="${{ steps.remote_marker.outputs.remote_hash }}"
          echo "[diff] local_hash=$LOCAL"
          echo "[diff] remote_hash=$REMOTE"
          STATUS="unknown"
          if [ -z "$REMOTE" ]; then
            STATUS="no_remote_marker"
          else
            if [ "$LOCAL" = "$REMOTE" ]; then STATUS="match"; else STATUS="drift"; fi
          fi
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          printf '{"status":"%s","local_hash":"%s","remote_hash":"%s","timestamp":"%s"}\n' \
            "$STATUS" "$LOCAL" "$REMOTE" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > drift-summary.json
          sed 's/^/[diff][json]/' drift-summary.json

      - name: Upload drift summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: drift-summary
          path: drift-summary.json
          retention-days: 5
          if-no-files-found: error

      - name: Create drift issue (if mismatch)
        if: ${{ steps.compare.outputs.status == 'drift' && env.MODE == 'drift' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE="Remote code manifest drift detected"
          LOCAL='${{ steps.local_manifest.outputs.local_hash }}'
          REMOTE='${{ steps.remote_marker.outputs.remote_hash }}'
          TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
             BODY="Drift detected between repository code manifest and remote deployment marker.\n\nLocal: $LOCAL\nRemote: $REMOTE\nTimestamp: $TS\n\nRun a deployment (audit first if uncertain) or investigate remote modifications." 
          ESC_BODY=$(printf '%s' "$BODY" | sed 's/"/\\"/g')
          PAYLOAD=$(printf '{"title":"%s","body":"%s","labels":["drift","automation"]}' "$TITLE" "$ESC_BODY")
          curl -s -S -H "Authorization: Bearer $GITHUB_TOKEN" -H 'Accept: application/vnd.github+json' -X POST -d "$PAYLOAD" "https://api.github.com/repos/${{ github.repository }}/issues" | head -c 200 | sed 's/^/[issue][resp]/'

      - name: Final status
        if: ${{ always() }}
        run: |
          echo "drift.status=${{ steps.compare.outputs.status }} mode=$MODE"